{"version":3,"sources":["Components/Header.js","Components/Home.js","Components/GameSetup.js","Components/GameInfo.js","Components/Stats.js","Components/Subs.js","Components/Team.js","Components/Teams.js","Components/Games.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Home","props","useState","userVal","setUserVal","userID","onSubmit","e","preventDefault","setUserID","localStorage","setItem","id","type","value","onChange","target","to","GameSetup","time","setTime","dark","setDark","light","setLight","statTeam","setStatTeam","offence","setOffence","error","setError","teamNames","key","teams","team","push","name","htmlFor","min","max","checked","setTestGame","onClick","offenceBool","timeStr","formTime","parseInt","isValidTime","finishSetup","GameInfo","darkTeam","score","gameTime","startTimer","setPaused","console","log","paused","pauseTimer","resetTimer","lightTeam","OffenceButtons","handleStatClick","player","stats","Touch","Assist","Point","Drop","DefenceButtons","GSO","PlayerList","list","playerStats","map","Stats","window","onbeforeunload","db","localDB","showSetup","testGame","gameLength","confirm","toast","dismiss","autoClose","resetGame","success","gameDetails","date","Date","statTaker","gameHistory","newAllHistory","allGameHistory","setAllGameHistory","get","then","doc","games","put","res","catch","err","_id","newHistory","newScore","lastEntry","pop","newPlayerStats","forEach","el","action","lastPlayer","setPlayerStats","turnover","toggleOffence","info","setScore","setGameHistory","currentTarget","length","historyEntry","toDateString","toTimeString","Subs","Player","setPlayer","ind","newTeams","teamInd","findIndex","playerInd","setTeams","listItems","players","Team","showPlayers","setShowPlayers","toggleShowPlayers","gm","deleteTeam","saveTeams","TeamList","Teams","teamName","setTeamName","teamGM","setTeamGM","showAddTeam","setShowAddTeam","teamPlayers","handleInputChange","splice","GameList","game","gameDate","fileName","getFullYear","getMonth","getDay","data","filename","Games","Slide","cssTransition","enter","exit","duration","App","loadingDB","setLoadingDB","getItem","PouchDB","remoteDB","setGameLength","setDarkTeam","setLightTeam","setShowSetup","setGameTime","Timer","countdown","callback","timer","getTimeValues","toString","gameTimer","getData","useCallback","allDocs","include_docs","rows","row","useEffect","dbSync","sync","live","retry","on","changedDoc","change","docs","direction","cancel","padStart","path","exact","findTeam","find","initPlayerStats","start","startValues","minutes","pause","stopTimer","stop","reset","activeClassName","position","transition","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qZAGe,SAASA,IACpB,OACI,4BAAQC,UAAU,cACd,yDCDG,SAASC,EAAKC,GAAQ,IAAD,EAEFC,mBAAS,IAFP,mBAEzBC,EAFyB,KAEhBC,EAFgB,KAgBhC,OACI,yBAAKL,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBACTE,EAAMI,QACJ,yBAAKN,UAAU,aACX,mDACA,0BAAMO,SAlBL,SAACC,GAClBA,EAAEC,iBACFP,EAAMQ,UAAUN,GAChBO,aAAaC,QAAQ,SAAUR,KAgBX,2BAAOS,GAAG,aAAaC,KAAK,OAAOC,MAAOX,EAASY,SAZtD,SAACR,GAClBH,EAAWG,EAAES,OAAOF,UAYA,4BAAQf,UAAU,MAAMc,KAAK,UAA7B,WAIXZ,EAAMI,QACH,6BACI,8CAAgBJ,EAAMI,SACtB,yBAAKN,UAAU,kBACX,kBAAC,IAAD,CACIA,UAAU,MACVkB,GAAG,UAFP,SAIA,kBAAC,IAAD,CACIlB,UAAU,MACVkB,GAAG,SAFP,QAIA,kBAAC,IAAD,CACIlB,UAAU,MACVkB,GAAG,UAFP,SAIA,kBAAC,IAAD,CACIlB,UAAU,MACVkB,GAAG,UAFP,kB,iCC/Cb,SAASC,EAAUjB,GAAQ,IAAD,EAEbC,mBAAS,MAFI,mBAE9BiB,EAF8B,KAExBC,EAFwB,OAGblB,mBAAS,IAHI,mBAG9BmB,EAH8B,KAGxBC,EAHwB,OAIXpB,mBAAS,IAJE,mBAI9BqB,EAJ8B,KAIvBC,EAJuB,OAKLtB,mBAAS,IALJ,mBAK9BuB,EAL8B,KAKpBC,EALoB,OAMPxB,mBAAS,IANF,mBAM9ByB,EAN8B,KAMrBC,EANqB,OAOX1B,mBAAS,IAPE,mBAO9B2B,EAP8B,KAOvBC,EAPuB,KASjCC,EAAY,CAAC,4BAAQjB,MAAM,GAAGkB,IAAI,MATD,uBAUrC,YAAiB/B,EAAMgC,MAAvB,+CAA8B,CAAC,IAAtBC,EAAqB,QAC1BH,EAAUI,KAAK,4BAAQrB,MAAOoB,EAAKE,KAAMJ,IAAKE,EAAKE,MAAOF,EAAKE,QAX9B,kFAsCrC,OACI,yBAAKrC,UAAU,mBACX,wBAAIa,GAAG,eAAP,cACA,2BAAOyB,QAAQ,eAAf,sBACA,2BAAOD,KAAK,cAAcvB,KAAK,SAASyB,IAAI,IAAIC,IAAI,MAChDzB,MAAOK,EAAMJ,SAAU,SAACR,GAAD,OAAOa,EAAQb,EAAES,OAAOF,UACnD,2BAAOuB,QAAQ,aAAf,oBACA,4BAAQD,KAAK,YAAYtB,MAAOO,EAC5BN,SAAU,SAACR,GAAD,OAAOe,EAAQf,EAAES,OAAOF,SAASiB,GAC/C,2BAAOM,QAAQ,cAAf,qBACA,4BAAQD,KAAK,aAAatB,MAAOS,EAC7BR,SAAU,SAACR,GAAD,OAAOiB,EAASjB,EAAES,OAAOF,SAASiB,GAEhD,2BAAOM,QAAQ,aAAf,oBACA,4BAAQD,KAAK,YAAYtB,MAAOW,EAC5BV,SAAU,SAACR,GAAD,OAAOmB,EAAYnB,EAAES,OAAOF,SACtC,iCACA,0CAAYO,IACZ,0CAAYE,KAEhB,2BAAOc,QAAQ,gBAAf,mBACA,4BAAQD,KAAK,eAAetB,MAAOa,EAC/BZ,SAAU,SAACR,GAAD,OAAOqB,EAAWrB,EAAES,OAAOF,SACrC,iCACA,0CAAYO,IACZ,0CAAYE,KAEhB,yBAAKX,GAAG,qBAAqBG,SA/BjB,SAACR,GACjBA,EAAES,OAAOwB,QAAUvC,EAAMwC,aAAY,GAAQxC,EAAMwC,aAAY,KA+BvD,2BAAO5B,KAAK,aACZ,sDAEJ,4BAAQd,UAAU,MAAM2C,QAjDX,WASjB,IAAIC,GAfY,SAACC,GACjB,IAAIC,EAAWC,SAASF,GACxB,OAAIC,GAAY,GAAKA,GAAY,KAK5BE,CAAY5B,GAIZE,GAASE,GAAUE,GAAaE,GAKdgB,EAAvBlB,IAAaE,EACb1B,EAAM+C,YAAY7B,EAAME,EAAME,EAAOE,EAAUkB,IAL3Cb,EAAS,6BAJTA,EAAS,yCA+CT,gBACCD,GACG,0BAAM9B,UAAU,YAAY8B,ICvE7B,SAASoB,EAAShD,GAE7B,OACI,yBAAKF,UAAU,aACX,yBAAKA,UAAU,mBACX,0BAAMa,GAAG,aAAaX,EAAMiD,UAC5B,0BAAMnD,UAAU,cAAcE,EAAMkD,MAAM9B,OAE9C,yBAAKtB,UAAU,cACX,wCAAUE,EAAMmD,WAChB,yBAAKrD,UAAU,kBACX,uBAAGA,UAAU,+BACT2C,QAAS,WACLzC,EAAMoD,aACNpD,EAAMqD,WAAU,GAChBC,QAAQC,IAAI,iBAJpB,eAMEvD,EAAMwD,QAAU,uBAAG1D,UAAU,+BAC3B2C,QAAS,WACLzC,EAAMyD,aACNzD,EAAMqD,WAAU,GAChBC,QAAQC,IAAI,iBAJF,SAMjBvD,EAAMwD,QAAU,uBAAG1D,UAAU,+BAC1B2C,QAAS,WACLzC,EAAM0D,aACN1D,EAAMyD,aACNzD,EAAMqD,WAAU,GAChBC,QAAQC,IAAI,iBALH,YASzB,yBAAKzD,UAAU,oBACX,0BAAMa,GAAG,aAAaX,EAAM2D,WAC5B,0BAAM7D,UAAU,eAAeE,EAAMkD,MAAM5B,S,iBC/BrDsC,EAAiB,SAAC5D,GAEpB,OACI,yBAAKF,UAAU,aACX,4BACIA,UAAU,eACVqC,KAAK,QACLM,QAAS,SAACnC,GAAD,OAAON,EAAM6D,gBAAgBvD,EAAGN,EAAM8D,QAAQ,KAH3D,QAKQ,yBAAKhE,UAAU,eAAeE,EAAM+D,MAAMC,OAClB,IAAvBhE,EAAM+D,MAAME,QACT,yBAAKnE,UAAU,sBAAf,UAAwCE,EAAM+D,MAAME,OAApD,QAEZ,4BACInE,UAAU,eACVqC,KAAK,QACLM,QAAS,SAACnC,GAAD,OAAON,EAAM6D,gBAAgBvD,EAAGN,EAAM8D,UAHnD,QAKQ,yBAAKhE,UAAU,eAAeE,EAAM+D,MAAMG,QAElD,4BACIpE,UAAU,eACVqC,KAAK,SACLM,QAAS,SAACnC,GAAD,OAAON,EAAM6D,gBAAgBvD,EAAGN,EAAM8D,UAHnD,SAKQ,yBAAKhE,UAAU,eAAeE,EAAM+D,MAAM,YAElD,4BACIjE,UAAU,eACVqC,KAAK,OACLM,QAAS,SAACnC,GAAD,OAAON,EAAM6D,gBAAgBvD,EAAGN,EAAM8D,UAHnD,OAKQ,yBAAKhE,UAAU,eAAeE,EAAM+D,MAAMI,SAMxDC,EAAiB,SAACpE,GAEpB,OACI,yBAAKF,UAAU,aACX,4BACIA,UAAU,eACVqC,KAAK,SACLM,QAAS,SAACnC,GAAD,OAAON,EAAM6D,gBAAgBvD,EAAGN,EAAM8D,UAHnD,SAKQ,yBAAKhE,UAAU,eAAeE,EAAM+D,MAAM,YAElD,4BACIjE,UAAU,eACVqC,KAAK,MACLM,QAAS,SAACnC,GAAD,OAAON,EAAM6D,gBAAgBvD,EAAGN,EAAM8D,UAHnD,MAKQ,yBAAKhE,UAAU,eAAeE,EAAM+D,MAAMM,MAElD,4BACIvE,UAAU,eACVqC,KAAK,WACLM,QAAS,SAACnC,GAAD,OAAON,EAAM6D,gBAAgBvD,EAAGN,EAAM8D,UAHnD,WAKQ,yBAAKhE,UAAU,eAAeE,EAAM+D,MAAM,gBAMxDO,EAAa,SAACtE,GAChB,IACMuE,EADcvE,EAAMwE,YACDC,KAAI,SAAAX,GAAM,OAC/B,yBAAK/B,IAAK+B,EAAO3B,KAAMrC,UAAU,gBAC7B,yBACIA,UAAS,sBAAiBE,EAAMiD,WAAajD,EAAMwB,SAAW,OAAS,KAEvE,0BAAM1B,UAAU,eAAegE,EAAO3B,OAEzCnC,EAAM0B,SACH,kBAAC,EAAD,CACIoC,OAAQA,EAAO3B,KACf4B,MAAOD,EAAOC,MACdF,gBAAiB7D,EAAM6D,mBAE7B7D,EAAM0B,SACJ,kBAAC,EAAD,CACIoC,OAAQA,EAAO3B,KACf4B,MAAOD,EAAOC,MACdF,gBAAiB7D,EAAM6D,sBAIvC,OACI,yBAAK/D,UAAU,eAAeyE,IAIvB,SAASG,EAAM1E,GAG1B2E,OAAOC,eAAiB,WACpB,MAAO,IAGX,IAAIC,EAAK7E,EAAM8E,QAsIf,OACI,yBAAKhF,UAAU,OACX,yBAAKA,UAAU,SACVE,EAAM+E,WACH,kBAAC,EAAD,CACI/C,MAAOhC,EAAMgC,MACbe,YAAa/C,EAAM+C,YACnBP,YAAaxC,EAAMwC,eAEzBxC,EAAM+E,WACJ,yBAAKjF,UAAU,cACVE,EAAMgF,UACH,yBAAKrE,GAAG,qBACJ,uBAAGA,GAAG,aAAN,cAER,kBAACqC,EAAD,CACIC,SAAUjD,EAAMiD,SAChBU,UAAW3D,EAAM2D,UACjBT,MAAOlD,EAAMkD,MACbC,SAAUnD,EAAMmD,SAChB8B,WAAYjF,EAAMiF,WAClB7B,WAAYpD,EAAMoD,WAClBK,WAAYzD,EAAMyD,WAClBC,WAAY1D,EAAM0D,WAClBF,OAAQxD,EAAMwD,OACdH,UAAWrD,EAAMqD,YAErB,yBAAKvD,UAAU,gBACX,4BAAQA,UAAU,cACd2C,QAAS,WACDkC,OAAOO,QAAQ,8CACfC,IAAMC,UACND,IAAMvD,MAAM,eAAgB,CAACyD,UAAW,MACxCrF,EAAMsF,eALlB,aAQA,4BAAQxF,UAAU,cACd2C,QAxEX,WACb0C,IAAMC,UACND,IAAMI,QAAQ,aAAc,CAACF,UAAW,MACxC,IAAIG,EAAc,CACdC,KAAM,IAAIC,KACVzC,SAAUjD,EAAMiD,SAChBU,UAAW3D,EAAM2D,UACjBnC,SAAUxB,EAAMwB,SAChByD,WAAYjF,EAAMiF,WAClBT,YAAaxE,EAAMwE,YACnBtB,MAAOlD,EAAMkD,MACb8B,SAAUhF,EAAMgF,SAChBW,UAAW3F,EAAMI,OACjBwF,YAAa5F,EAAM4F,aAEnBC,EAAa,YAAO7F,EAAM8F,gBAC9BD,EAAc3D,KAAKsD,GACnBxF,EAAM+F,kBAAkBF,GAExBhB,EAAGmB,IAAI,gBAAgBC,MAAK,SAAAC,GAExB,OADAA,EAAIC,MAAQN,EACLhB,EAAGuB,IAAIF,MACfD,MAAK,SAAAI,GAAG,OAAI/C,QAAQC,IAAI8C,MAC1BC,OAAM,SAAAC,GACc,cAAbA,EAAIpE,KACJ0C,EAAGuB,IAAI,CACHI,IAAK,eACLL,MAAON,IAGXvC,QAAQC,IAAIgD,MAEjBN,MAAK,kBAAMjG,EAAMsF,iBAuCA,iBAEA,4BAAQxF,UAAU,cACd2C,QAlHT,WACf0C,IAAMC,UACN,IAAIqB,EAAU,YAAOzG,EAAM4F,aACvBc,EAAQ,eAAQ1G,EAAMkD,OAEtByD,EAAYF,EAAWG,MAC3B,GAAKD,EAAL,CAIArD,QAAQC,IAAI,QAEZ,IAAIsD,EAAc,YAAO7G,EAAMwE,aAC/BqC,EAAeC,SAAQ,SAAAC,GACnB,GAAIA,EAAG5E,OAASwE,EAAU7C,OAGtB,MAFyB,SAArB6C,EAAUK,QAAmBD,EAAGhD,MAAMC,aAC1C+C,EAAGhD,MAAM4C,EAAUK,UAGE,UAArBL,EAAUK,QAAsBL,EAAUM,aAAeF,EAAG5E,MAC5D4E,EAAGhD,MAAME,YAGjBjE,EAAMkH,eAAeL,GAEjBF,EAAUQ,UAAUnH,EAAMoH,gBAEL,UAArBT,EAAUK,SACVhH,EAAMwB,WAAaxB,EAAMiD,SAAWyD,EAAStF,OAASsF,EAASpF,SAE1C,QAArBqF,EAAUK,QAAyC,aAArBL,EAAUK,SACxChH,EAAMwB,WAAaxB,EAAMiD,SAAWyD,EAASpF,QAAUoF,EAAStF,QAGpE+D,IAAMkC,KAAN,gBAAoBV,EAAUK,OAA9B,eAA2CL,EAAU7C,SAErD9D,EAAMsH,SAASZ,GACf1G,EAAMuH,eAAed,QA9BjBtB,IAAMkC,KAAK,qBA0GK,OAEQ,uBAAGvH,UAAU,wBAAb,UAGZ,kBAAC,EAAD,CACI4B,QAAS1B,EAAM0B,QACf8C,YAAaxE,EAAMwE,YACnB0C,eAAgBlH,EAAMkH,eACtB1F,SAAUxB,EAAMwB,SAChByB,SAAUjD,EAAMiD,SAChBY,gBArLA,SAACvD,EAAGwD,GAA6B,IAAD,EAApBqD,IAAoB,yDACpDhC,IAAMC,UACF+B,GAAUnH,EAAMoH,gBACpB,IAAIJ,EAAS1G,EAAEkH,cAAcrF,KAEzBsE,EAAU,YAAOzG,EAAM4F,aAEvBe,EAAYF,EAAWA,EAAWgB,OAAS,IAAM,GACjDR,EAAa,IAEbN,GAAyB,UAAXK,GAAiC,SAAXA,IACpCC,EAAaN,EAAU7C,QAGZ,UAAXkD,GAAuBL,EAAUQ,WAAUF,EAAaN,EAAU7C,QAEtE,IAAI4C,EAAQ,eAAQ1G,EAAMkD,OACX,UAAX8D,IACAhH,EAAMwB,WAAaxB,EAAMiD,SAAWyD,EAAStF,OAASsF,EAASpF,SAEpD,QAAX0F,GAA+B,aAAXA,IACpBhH,EAAMwB,WAAaxB,EAAMiD,SAAWyD,EAASpF,QAAUoF,EAAStF,QAEpEpB,EAAMsH,SAASZ,GAEf,IAAIxF,EAAO,IAAIwE,KACXgC,GAAY,GACZjC,KAAMvE,EAAKyG,eACXzG,KAAMA,EAAK0G,eACXzE,SAAUnD,EAAMmD,SAChB3B,SAAUxB,EAAMwB,UAJJ,wBAKRxB,EAAMiD,SALE,UAKiByD,EAAStF,MAL1B,wBAMRpB,EAAM2D,UANE,UAMkB+C,EAASpF,OAN3B,uBAOJ0F,GAPI,uBAQJlD,GARI,2BASAmD,GATA,yBAUFE,GAVE,GAaZN,EAAc,YAAO7G,EAAMwE,aAC/BqC,EAAeC,SAAQ,SAAAC,GACfA,EAAG5E,OAAS2B,IACG,SAAXkD,GAAmBD,EAAGhD,MAAMC,QAChC+C,EAAGhD,MAAMiD,MAEE,UAAXA,GAAsBD,EAAG5E,OAAS8E,GAAYF,EAAGhD,MAAME,YAE/DjE,EAAMkH,eAAeL,GAErBvD,QAAQC,IAAR,UAAeO,EAAf,aAA0BkD,EAA1B,wBAAgDhH,EAAMmD,SAAtD,iCACYuE,EAAaxG,OAEzBiE,IAAMI,QAAN,sBAA6ByB,EAA7B,cAAyClD,EAAzC,YAAmDmD,EAAa,QAAUA,EAAa,KACvFR,EAAWvE,KAAKwF,GAChB1H,EAAMuH,eAAed,IAgIDb,YAAa5F,EAAM4F,iBClShC,SAASiC,EAAK7H,GACzB,OACI,yBAAKF,UAAU,OACX,4CCHZ,IAAMgI,EAAS,SAAC9H,GAAW,IAAD,EAEMC,mBAASD,EAAM8D,QAFrB,mBAEfA,EAFe,KAEPiE,EAFO,KAatB,OAAO,2BACHjI,UAAU,cACVqC,KAAMnC,EAAMgI,IACZnH,MAAOiD,EACPhD,SAbuB,SAACR,GACxByH,EAAUzH,EAAES,OAAOF,OACnB,IAAIoH,EAAQ,YAAOjI,EAAMgC,OACrBkG,EAAUD,EAASE,WAAU,SAAApB,GAAE,OAAIA,EAAG5E,OAASnC,EAAMiC,KAAKE,QAC1DiG,EAAYvF,SAASvC,EAAES,OAAOoB,MAClC8F,EAASC,GAAT,QAA6BE,GAAa9H,EAAES,OAAOF,MACnDb,EAAMqI,SAASJ,OAUjB3D,EAAa,SAACtE,GAEhB,IACMsI,EADQtI,EAAMiC,KAAKsG,QACC9D,KAAI,SAACX,EAAQkE,GAAT,OAC1B,kBAAC,EAAD,CACIlE,OAAQA,EACRkE,IAAKA,EACLjG,IAAKiG,EACLhG,MAAOhC,EAAMgC,MACbqG,SAAUrI,EAAMqI,SAChBpG,KAAMjC,EAAMiC,UAGpB,OAAO,yBAAKnC,UAAU,eAAewI,IAG1B,SAASE,EAAKxI,GAAQ,IAAD,EAEMC,oBAAS,GAFf,mBAEzBwI,EAFyB,KAEZC,EAFY,KAI1BC,EAAoB,WACtBD,GAAgBD,IAQpB,OACI,yBAAK3I,UAAU,kBACX,yBAAKA,UAAU,aACX,wCAAUE,EAAMiC,KAAKE,QAEzB,yBAAKrC,UAAU,aACX,0BAAMA,UAAU,WAAhB,cAAkCE,EAAMiC,KAAK2G,KAC7C,0BAAM9I,UAAU,YAAY2C,QAASkG,GACjC,0CACEF,GAAe,uBAAG3I,UAAU,wBAAb,mBAChB2I,GAAe,uBAAG3I,UAAU,wBAAb,mBAGvB2I,GACG,yBAAK3I,UAAU,gBACX,kBAAC,EAAD,CACImC,KAAMjC,EAAMiC,KACZD,MAAOhC,EAAMgC,MACbqG,SAAUrI,EAAMqI,WAEpB,4BAAQvI,UAAU,cAAcqC,KAAMnC,EAAMgI,IAAKvF,QAASzC,EAAM6I,YAAhE,eACA,4BAAQ/I,UAAU,MAAM2C,QA1BvB,WACbzC,EAAM8I,YACNH,MAwBY,kB,UCpEdI,EAAW,SAAC/I,GACd,IAAMgC,EAAQhC,EAAMgC,MAAMyC,KAAI,SAACxC,EAAM+F,GAAP,OAC9B,kBAACQ,EAAD,CACIvG,KAAMA,EACN+F,IAAKA,EACLjG,IAAKE,EAAKE,KACVH,MAAOhC,EAAMgC,MACbqG,SAAUrI,EAAMqI,SAChBS,UAAW9I,EAAM8I,UACjBD,WAAY7I,EAAM6I,gBAEtB,OACI,yBAAK/I,UAAU,aAAakC,IAIrB,SAASgH,EAAMhJ,GAE1B,IAAM6E,EAAK7E,EAAM8E,QAFgB,EAID7E,mBAAS,IAJR,mBAI1BgJ,EAJ0B,KAIhBC,EAJgB,OAKLjJ,mBAAS,IALJ,mBAK1BkJ,EAL0B,KAKlBC,EALkB,OAMKnJ,oBAAS,GANd,mBAM1BoJ,EAN0B,KAMbC,EANa,KAQ3BC,EAAc,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGEC,EAAoB,SAAClJ,GACvB,OAAQA,EAAES,OAAOoB,MACb,IAAK,YACD+G,EAAY5I,EAAES,OAAOF,OACrB,MACJ,IAAK,UACDuI,EAAU9I,EAAES,OAAOF,OACnB,MACJ,QACIyC,QAAQC,IAAI,wBA8DxB,OACI,yBAAKzD,UAAU,OACX,kBAAC,EAAD,CACIkC,MAAOhC,EAAMgC,MACbqG,SAAUrI,EAAMqI,SAChBS,UA3BM,WACdxF,QAAQC,IAAI,gBACZ,IAAI0E,EAAQ,YAAOjI,EAAMgC,OACzB6C,EAAGmB,IAAI,YAAYC,MAAK,SAAAC,GAEpB,OADAA,EAAIlE,MAAQiG,EACLpD,EAAGuB,IAAIF,MACfD,MAAK,SAAAI,GAAG,OAAI/C,QAAQC,IAAI8C,MAC1BC,OAAM,SAAAhG,GAAC,OAAIgD,QAAQC,IAAIjD,OAqBhBuI,WAlBO,SAACvI,GAChB,IAAI4H,EAAUrF,SAASvC,EAAES,OAAOoB,MAC5B8F,EAAQ,YAAOjI,EAAMgC,OACzBiG,EAASwB,OAAOvB,EAAS,GACzBlI,EAAMqI,SAASJ,GACfpD,EAAGmB,IAAI,YAAYC,MAAK,SAAAC,GAEpB,OADAA,EAAIlE,MAAQiG,EACLpD,EAAGuB,IAAIF,MACfD,MAAK,SAAAI,GAAG,OAAI/C,QAAQC,IAAI8C,MAC1BC,OAAM,SAAAhG,GAAC,OAAIgD,QAAQC,IAAIjD,UAWlB+I,GACF,4BAAQvJ,UAAU,MAAM2C,QAAS,WAAO6G,GAAe,KAAvD,YACCD,GACD,yBAAKvJ,UAAU,iBACX,2BAAOsC,QAAQ,aAAf,eACA,2BAAOD,KAAK,YAAYrB,SAAU0I,EAAmB3I,MAAOoI,IAC5D,2BAAO7G,QAAQ,WAAf,aACA,2BAAOD,KAAK,UAAUrB,SAAU0I,EAAmB3I,MAAOsI,IAC1D,4BAAQrJ,UAAU,MAAM2C,QAxDjB,SAACnC,GAChBA,EAAEC,iBACF,IApBiByB,EAoBbiG,EAAQ,YAAOjI,EAAMgC,OACzBiG,EAAS/F,KAAK,CACVC,KAAM8G,EACNL,GAAIO,EACJZ,QAASgB,IAGbvJ,EAAMqI,SAASJ,GA3BEjG,EA6BLiG,EA5BZpD,EAAGmB,IAAI,YAAYC,MAAK,SAAAC,GAEpB,OADAA,EAAIlE,MAAQA,EACL6C,EAAGuB,IAAIF,MACfD,MAAK,SAAAI,GAAG,OAAI/C,QAAQC,IAAI8C,MAC1BC,OAAM,SAAAC,GACc,cAAbA,EAAIpE,MACJ0C,EAAGuB,IAAI,CACHI,IAAK,WACLxE,MAAOA,IAEXsB,QAAQC,IAAI,yBAEZD,QAAQC,IAAIgD,MAkBpB2C,EAAY,IACZE,EAAU,IACVE,GAAe,KAyCP,eACA,4BAAQxJ,UAAU,UAAU2C,QAAS,kBAAM6G,GAAe,KAA1D,Y,YC9HVI,EAAW,SAAC1J,GACd,IAAMmG,EAAQnG,EAAMmG,MAAM1B,KAAI,SAACkF,GAC3B,IAAIC,EAAW,IAAIlE,KAAKiE,EAAKlE,MACzBoE,EAAQ,UAAMD,EAASE,cAAf,YAAgCF,EAASG,WAAW,EAApD,YAAyDH,EAASI,SAAlE,YAA8EL,EAAK1G,SAAnF,eAAkG0G,EAAKhG,UAAvG,YAAoHgG,EAAKhE,UAAzH,QACZ,OACI,yBAAK5D,IAAK4H,EAAKlE,KAAM3F,UAAU,QAC3B,8BAAO,IAAI4F,KAAKiE,EAAKlE,MAAMkC,gBAC3B,oDAAsBgC,EAAKhE,YAC1BgE,EAAK3E,UAAY,2CAClB,0CACA,wCAAU2E,EAAKhG,UAAf,cAA8BgG,EAAKzG,MAAM5B,QACzC,wCAAUqI,EAAK1G,SAAf,cAA6B0G,EAAKzG,MAAM9B,OACxC,kBAAC,UAAD,CACI6I,KAAMN,EAAK/D,YACXsE,SAAUL,EACV9I,OAAO,UAHX,yBASZ,OAAO,yBAAKjB,UAAU,aAAaqG,IAGxB,SAASgE,EAAMnK,GAC1B,OACI,yBAAKF,UAAU,OACX,8CACA,kBAAC,EAAD,CAAUqG,MAAOnG,EAAM8F,kB,qBCZ7BsE,G,MAAQC,YAAc,CAC1BC,MAAO,WACPC,KAAM,YACNC,SAAU,CAAC,IAAK,QAkPHC,MA/Of,WAEE,IAFa,EAOqBxK,oBAAS,GAP9B,mBAONyK,EAPM,KAOKC,EAPL,OAQe1K,mBAASQ,aAAamK,QAAQ,WAAa,IAR1D,mBAQNxK,EARM,KAQEI,EARF,OASMP,mBAAS,IAAI4K,IAAJ,UAL1B,iCAK0B,qBAArBC,EATM,sBAUK7K,mBAAS,IAAI4K,IAAQ,mBAAhC/F,EAVM,sBAWa7E,mBAAS,IAXtB,mBAWN+B,EAXM,KAWCqG,EAXD,OAY+BpI,mBAAS,IAZxC,mBAYN6F,EAZM,KAYUC,EAZV,OAauB9F,mBAAS,IAbhC,mBAaNgF,EAbM,KAaM8F,EAbN,OAcmB9K,mBAAS,IAd5B,mBAcNgD,EAdM,KAcI+H,EAdJ,OAeqB/K,mBAAS,IAf9B,mBAeN0D,EAfM,KAeKsH,EAfL,OAgBqBhL,oBAAS,GAhB9B,mBAgBN8E,EAhBM,KAgBKmG,EAhBL,OAiBmBjL,mBAAS,IAjB5B,mBAiBNuB,EAjBM,KAiBIC,EAjBJ,QAmByBxB,mBAAS,IAnBlC,qBAmBNuE,GAnBM,MAmBO0C,GAnBP,SAoBiBjH,oBAAS,GApB1B,qBAoBNyB,GApBM,MAoBGC,GApBH,SAqBa1B,mBAAS,CACjC,KAAQ,EACR,MAAS,IAvBE,qBAqBNiD,GArBM,MAqBCoE,GArBD,SAyByBrH,mBAAS,IAzBlC,qBAyBN2F,GAzBM,MAyBO2B,GAzBP,SA0BmBtH,mBAAS,IA1B5B,qBA0BNkD,GA1BM,MA0BIgI,GA1BJ,SA2BelL,oBAAS,GA3BxB,qBA2BNuD,GA3BM,MA2BEH,GA3BF,SA4BmBpD,oBAAS,GA5B5B,qBA4BN+E,GA5BM,MA4BIxC,GA5BJ,SA6BqBvC,mBAAS,IAAImL,IAAM,CACnDC,WAAW,EACXC,SAAU,SAACC,GACTJ,GAAYI,EAAMC,gBAAgBC,SAAS,CAAC,UAAW,iBAhC9C,qBA6BNC,GA7BM,MAwCPC,IAxCO,MAwCGC,uBAAY,WACrBd,IACLH,GAAa,GACbG,EAASe,QAAQ,CAAEC,cAAc,IAAQ7F,MAAK,SAAAI,GAC5C/C,QAAQC,IAAI,qBACZD,QAAQC,IAAI8C,GACZsE,GAAa,GACbtE,EAAI0F,KAAKjF,SAAQ,SAAAkF,GACK,aAAhBA,EAAI9F,IAAIM,KAAoB6B,EAAS2D,EAAI9F,IAAIlE,OAC7B,iBAAhBgK,EAAI9F,IAAIM,KAAwBT,EAAkBiG,EAAI9F,IAAIC,gBAGjE,CAAC2E,KAgGJ,OA7FAmB,qBAAU,WACHnB,IACLA,EAASzD,OACTsE,QACC,CAACb,EAAUa,KASdM,qBAAU,WAER,IAAIC,EADJ,IAAIxB,GAAc5F,GAAYgG,EAkB9B,OAhBAoB,EAASpH,EAAQqH,KAAKrB,EAAU,CAC9BsB,MAAM,EACNC,OAAO,EACPP,cAAc,IACbQ,GAAG,UAAU,SAAChM,GACfgD,QAAQC,IAAI,mBACZD,QAAQC,IAAIjD,GACZ,IAhBwB4F,EAgBpBqG,EAAajM,EAAEkM,OAAOC,KAAK,GACX,SAAhBnM,EAAEoM,WAjBkBxG,EAkBHqG,EAhBvBjJ,QAAQC,IAAI2C,GAiBR5C,QAAQC,IAAR,mBAAwBgJ,EAAW/F,OAEnClD,QAAQC,IAAI,8BAEb+I,GAAG,UAAU,kBAAMhJ,QAAQC,IAAI,kBAC/B+I,GAAG,SAAS,kBAAMhJ,QAAQC,IAAI,0BAC1B,WACL2I,EAAOS,SACPrJ,QAAQC,IAAI,qBAEb,CAACmH,EAAW5F,EAASgG,IAGxBmB,qBAAU,WACRd,GAAY,GAAD,OAAIlG,EAAWwG,WAAWmB,SAAS,EAAG,GAAtC,UACV,CAAC3H,IAqDF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4H,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,CACE1M,OAAQA,EACRI,UAAWA,EACXsE,QAASA,KAGb,kBAAC,IAAD,CAAO+H,KAAK,UACTzM,EACC,kBAAC,EAAD,CACEA,OAAQA,EACR0E,QAASA,EACT9C,MAAOA,EACP+C,UAAWA,EACXhC,YAlEQ,SAAC7B,EAAME,EAAME,EAAOE,EAAUE,GAChDqJ,EAAclI,SAAS3B,IACvB8J,EAAY5J,GACZ6J,EAAa3J,GACbG,EAAYD,GACZG,GAAWD,GACXwJ,GAAa,GACb,IAAI6B,EAAW/K,EAAMgL,MAAK,SAAA/K,GAAI,OAAIA,EAAKE,OAASX,KAC5CyL,EAAkB,GARsC,uBAS5D,YAAmBF,EAASxE,QAA5B,+CAAqC,CAAC,IAA7BzE,EAA4B,QACnCmJ,EAAgB/K,KAAK,CACnBC,KAAM2B,EACNC,MAAO,CACLC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACP,SAAU,EACVC,KAAM,EACN,SAAU,EACVE,IAAK,EACL,WAAY,MApB0C,kFAwB5D6C,GAAe+F,IA2CLhI,WAAYA,EACZhC,SAAUA,EACVU,UAAWA,EACXnC,SAAUA,EACVE,QAASA,GACTwB,MAAOA,GACPoE,SAAUA,GACVxB,eAAgBA,EAChBC,kBAAmBA,EACnBH,YAAaA,GACb2B,eAAgBA,GAChBpE,SAAUA,GACVC,WAAY,kBAAMsI,GAAUwB,MAAM,CAAEC,YAAa,CAAEC,QAASnI,MAC5DxB,WAAY,kBAAMiI,GAAU2B,SAC5BC,UAAW,kBAAM5B,GAAU6B,QAC3B7J,WAAY,WACVgI,GAAU8B,QACVrC,GAAY,GAAD,OAAIlG,EAAWwG,WAAWmB,SAAS,EAAG,GAAtC,SAEbpJ,OAAQA,GACRH,UAAWA,GACXmB,YAAaA,GACb0C,eAAgBA,GAChBE,cA7CU,WACpBzF,IAAYD,KA6CFsD,SAAUA,GACVxC,YAAaA,GACb8C,UAlEM,WAChByF,EAAc,IACdW,GAAU6B,OACVvC,EAAY,IACZC,EAAa,IACbxJ,EAAY,IACZyJ,GAAa,GACbhE,GAAe,IACfK,GAAe,IACf4D,GAAY,SACZ9H,IAAU,GACVb,IAAY,GACZ8E,GAAS,CACP,KAAQ,EACR,MAAS,OAqDE,kBAAC,IAAD,CAAUtG,GAAG,OAEtB,kBAAC,IAAD,CAAO6L,KAAK,SACTzM,EACC,kBAACyH,EAAD,CACEzH,OAAQA,EACR0E,QAASA,IACN,kBAAC,IAAD,CAAU9D,GAAG,OAEtB,kBAAC,IAAD,CAAO6L,KAAK,UACTzM,EACC,kBAAC,EAAD,CACE4B,MAAOA,EACPqG,SAAUA,EACVvD,QAASA,IACN,kBAAC,IAAD,CAAU9D,GAAG,OAEtB,kBAAC,IAAD,CAAO6L,KAAK,UACV,kBAAC1C,EAAD,CACErE,eAAgBA,MAItB,yBAAKhG,UAAU,cACb,kBAAC,IAAD,CAASA,UAAU,WAAWkB,GAAG,IAAI8L,OAAK,EAACW,gBAAgB,cAA3D,QACA,kBAAC,IAAD,CAAS3N,UAAU,WAAWkB,GAAG,SAASyM,gBAAgB,cAA1D,SACA,kBAAC,IAAD,CAAS3N,UAAU,WAAWkB,GAAG,QAAQyM,gBAAgB,cAAzD,QACA,kBAAC,IAAD,CAAS3N,UAAU,WAAWkB,GAAG,SAASyM,gBAAgB,cAA1D,SACA,kBAAC,IAAD,CAAS3N,UAAU,WAAWkB,GAAG,SAASyM,gBAAgB,cAA1D,UAEF,kBAAC,IAAD,CACEC,SAAS,gBACTC,WAAYvD,EACZ/E,WAAW,EACXuI,iBAAe,EACfC,aAAa,EACbC,cAAc,EACdC,KAAK,EACLC,yBAAyB,EACzBC,WAAW,EACXC,cAAc,MCtPFC,QACW,cAA7BxJ,OAAOyJ,SAASC,UAEe,UAA7B1J,OAAOyJ,SAASC,UAEhB1J,OAAOyJ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5I,MAAK,SAAA6I,GACjCA,EAAaC,kB","file":"static/js/main.7bd99525.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Header.css';\n\nexport default function Header() {\n    return (\n        <header className='app-header'>\n            <h1>AFC Premier League Stats</h1>\n        </header>\n    )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Home.css';\nimport Header from './Header';\n\nexport default function Home(props) {\n\n    const [userVal, setUserVal] = useState('');\n\n    // set the userID on form submit\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        props.setUserID(userVal);\n        localStorage.setItem('userID', userVal);\n    }\n\n    // update state on form change\n    const handleChange = (e) => {\n        setUserVal(e.target.value);\n    }\n\n    return (\n        <div className='App'>\n            <Header />\n            <div className='home-content'>\n                {!props.userID &&\n                    <div className='home-form'>\n                        <p>Who is taking stats?</p>\n                        <form onSubmit={handleSubmit}>\n                            <input id='home-input' type='text' value={userVal} onChange={handleChange} />\n                            <button className='btn' type='submit'>Start</button>\n                        </form>\n                    </div>\n                }\n                {props.userID &&\n                    <div>\n                        <p>{`Welcome, ${props.userID}`}</p>\n                        <div className=\"home-btn-group\">\n                            <Link\n                                className='btn'\n                                to='/stats'>Stats\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/subs'>Subs\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/teams'>Teams\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/games'>Past Games\n                            </Link>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport '../styles/GameSetup.css';\n\nexport default function GameSetup(props) {\n\n    const [time, setTime] = useState('25');\n    const [dark, setDark] = useState('');\n    const [light, setLight] = useState('');\n    const [statTeam, setStatTeam] = useState('');\n    const [offence, setOffence] = useState('');\n    const [error, setError] = useState('');\n\n    let teamNames = [<option value='' key=''></option>];\n    for (let team of props.teams) {\n        teamNames.push(<option value={team.name} key={team.name}>{team.name}</option>);\n    }\n\n    const isValidTime = (timeStr) => {\n        let formTime = parseInt(timeStr);\n        if (formTime >= 1 && formTime <= 120) return true;\n        else return false;\n    }\n\n    const submitFinish = () => {\n        if (!isValidTime(time)) {\n            setError('Time should be between 1 - 120 mins')\n            return;\n        }\n        if (!dark || !light || !statTeam || !offence) {\n            setError('Please choose all options');\n            return;\n        }\n        let offenceBool;\n        statTeam === offence ? offenceBool = true : offenceBool = false;\n        props.finishSetup(time, dark, light, statTeam, offenceBool);\n    }\n\n    const handleCheck = (e) => {\n        e.target.checked ? props.setTestGame(true) : props.setTestGame(false);\n    }\n\n    return (\n        <div className='game-setup card'>\n            <h3 id='setup-title'>Game Setup</h3>\n            <label htmlFor='game-length'>Game Length (mins)</label>\n            <input name='game-length' type='number' min='1' max='120'\n                value={time} onChange={(e) => setTime(e.target.value)} />\n            <label htmlFor='dark-team'>Select Dark Team</label>\n            <select name='dark-team' value={dark}\n                onChange={(e) => setDark(e.target.value)}>{teamNames}</select>\n            <label htmlFor='light-team'>Select Light Team</label>\n            <select name='light-team' value={light}\n                onChange={(e) => setLight(e.target.value)}>{teamNames}</select>\n                     \n            <label htmlFor='stat-team'>Taking Stats For</label>\n            <select name='stat-team' value={statTeam}\n                onChange={(e) => setStatTeam(e.target.value)}>\n                <option></option>\n                <option>{`${dark}`}</option>\n                <option>{`${light}`}</option>\n            </select>\n            <label htmlFor='offence-team'>Team on Offence</label>\n            <select name='offence-team' value={offence}\n                onChange={(e) => setOffence(e.target.value)}>\n                <option></option>\n                <option>{`${dark}`}</option>\n                <option>{`${light}`}</option>\n            </select>\n            <div id='test-game-checkbox' onChange={handleCheck}>\n                <input type='checkbox'/>\n                <span>Check for test game</span>\n            </div>\n            <button className='btn' onClick={submitFinish}>Finish Setup</button>\n            {error &&\n                <span className='form-err'>{error}</span>}   \n        </div>\n    )\n}\n","import React from 'react';\n\n\nexport default function GameInfo(props) {\n\n    return (\n        <div className='game-info'>\n            <div className='score-card dark'>\n                <span id='team-name'>{props.darkTeam}</span>\n                <span className='score dark'>{props.score.dark}</span>\n            </div>\n            <div className='game-clock'>\n                <span>{`${props.gameTime}`}</span>\n                <div className='timer-controls'>\n                    <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.startTimer();\n                            props.setPaused(false);\n                            console.log('start timer')\n                        }}>play_arrow</i>\n                    {!props.paused && <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.pauseTimer();\n                            props.setPaused(true);\n                            console.log('pause timer')\n                        }}>pause</i>}\n                    {props.paused && <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.resetTimer();\n                            props.pauseTimer();\n                            props.setPaused(false);\n                            console.log('reset timer')\n                        }}>replay</i>}\n                </div>\n            </div>\n            <div className='score-card light'>\n                <span id='team-name'>{props.lightTeam}</span>\n                <span className='score light'>{props.score.light}</span>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport GameSetup from './GameSetup';\nimport GameInfo from './GameInfo';\nimport '../styles/Stats.css';\nimport { toast } from 'react-toastify';\n\nconst OffenceButtons = (props) => {\n\n    return (\n        <div className='stat-btns'>\n            <button\n                className='btn stat-btn'\n                name='Touch'\n                onClick={(e) => props.handleStatClick(e, props.player, false)}>\n                Touch\n                    <div className='score-badge'>{props.stats.Touch}</div>\n                    {props.stats.Assist !== 0 && \n                        <div className='score-badge assist'>{`${props.stats.Assist}-A`}</div>}\n            </button>\n            <button\n                className='btn stat-btn'\n                name='Point'\n                onClick={(e) => props.handleStatClick(e, props.player)}>\n                Point\n                    <div className='score-badge'>{props.stats.Point}</div>\n            </button>\n            <button\n                className='btn stat-btn'\n                name='T-Away'\n                onClick={(e) => props.handleStatClick(e, props.player)}>\n                T-Away\n                    <div className='score-badge'>{props.stats['T-Away']}</div>\n            </button>\n            <button\n                className='btn stat-btn'\n                name='Drop'\n                onClick={(e) => props.handleStatClick(e, props.player)}>\n                Drop\n                    <div className='score-badge'>{props.stats.Drop}</div>\n            </button>\n        </div>\n    )\n}\n\nconst DefenceButtons = (props) => {\n\n    return (\n        <div className='stat-btns'>\n            <button\n                className='btn stat-btn'\n                name='D-Play'\n                onClick={(e) => props.handleStatClick(e, props.player)}>\n                D-Play\n                    <div className='score-badge'>{props.stats['D-Play']}</div>\n            </button>\n            <button\n                className='btn stat-btn'\n                name='GSO'\n                onClick={(e) => props.handleStatClick(e, props.player)}>\n                GSO\n                    <div className='score-badge'>{props.stats.GSO}</div>\n            </button>\n            <button\n                className='btn stat-btn'\n                name='GSO-Mark'\n                onClick={(e) => props.handleStatClick(e, props.player)}>\n                GSO-Mark\n                    <div className='score-badge'>{props.stats['GSO-Mark']}</div>\n            </button>\n        </div>\n    )\n}\n\nconst PlayerList = (props) => {\n    const playerStats = props.playerStats;\n    const list = playerStats.map(player =>\n        <div key={player.name} className='player-input'>\n            <div\n                className={`player-name ${props.darkTeam === props.statTeam ? 'dark' : ''}`}\n            >\n                <span className='player-text'>{player.name}</span>\n            </div>\n            {props.offence &&\n                <OffenceButtons\n                    player={player.name}\n                    stats={player.stats}\n                    handleStatClick={props.handleStatClick}\n                />}\n            {!props.offence &&\n                <DefenceButtons\n                    player={player.name}\n                    stats={player.stats}\n                    handleStatClick={props.handleStatClick}\n                />}\n        </div>\n    )\n    return (\n        <div className='player-list'>{list}</div>\n    )\n}\n\nexport default function Stats(props) {\n\n    // show warning on page reload attempt *comment out for testing\n    window.onbeforeunload = () => {\n        return ''\n    }\n\n    let db = props.localDB;\n\n    const handleStatClick = (e, player, turnover = true) => {\n        toast.dismiss();\n        if (turnover) props.toggleOffence();\n        let action = e.currentTarget.name;\n        // set the game history\n        let newHistory = [...props.gameHistory];\n        // get the last entry and set player if available\n        let lastEntry = newHistory[newHistory.length - 1] || '';\n        let lastPlayer = '';\n        // set last thrower for Point and Drop\n        if (lastEntry && (action === 'Point' || action === 'Drop')) {\n            lastPlayer = lastEntry.player;\n        }\n        // set last thrower for touch (if not right after turnover)\n        if (action === 'Touch' && !lastEntry.turnover) lastPlayer = lastEntry.player;\n        // set the score for point, GSO\n        let newScore = { ...props.score };\n        if (action === 'Point') {\n            props.statTeam === props.darkTeam ? newScore.dark++ : newScore.light++;\n        }\n        if (action === 'GSO' || action === 'GSO-Mark') {\n            props.statTeam === props.darkTeam ? newScore.light++ : newScore.dark++;\n        }\n        props.setScore(newScore);\n        // add action to game history\n        let time = new Date();\n        let historyEntry = {\n            date: time.toDateString(),\n            time: time.toTimeString(),\n            gameTime: props.gameTime,\n            statTeam: props.statTeam,\n            [`${props.darkTeam}_score`]: newScore.dark,\n            [`${props.lightTeam}_score`]: newScore.light,\n            action: action,\n            player: player,\n            lastPlayer: lastPlayer,\n            turnover: turnover,\n        }\n        // set new player stats\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.forEach(el => {\n            if (el.name === player) {\n                if (action === 'Drop') el.stats.Touch++;\n                el.stats[action]++;\n            }\n            if (action === 'Point' && el.name === lastPlayer) el.stats.Assist++;\n        })\n        props.setPlayerStats(newPlayerStats);\n        // log entry to console\n        console.log(`${player}: ${action}: gameClock: ${props.gameTime}: \n            time: ${historyEntry.time}`)\n        \n        toast.success(`Last Entry: ${action} - ${player} ${lastPlayer ? 'from ' + lastPlayer : ''}`)\n        newHistory.push(historyEntry);\n        props.setGameHistory(newHistory);\n    }\n\n    const handleUndo = () => {\n        toast.dismiss();\n        let newHistory = [...props.gameHistory];\n        let newScore = { ...props.score };\n        // remove last entry from game history\n        let lastEntry = newHistory.pop();\n        if (!lastEntry) {\n            toast.info('Nothing to undo');\n            return;\n        }\n        console.log('UNDO')\n        // undo playerStats count\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.forEach(el => {\n            if (el.name === lastEntry.player) {\n                if (lastEntry.action === 'Drop') el.stats.Touch--;\n                el.stats[lastEntry.action]--;\n                return;\n            }\n            if (lastEntry.action === 'Point' && lastEntry.lastPlayer === el.name) {\n                el.stats.Assist--;\n            }\n        })\n        props.setPlayerStats(newPlayerStats);\n        // undo turnover and change buttons\n        if (lastEntry.turnover) props.toggleOffence();\n        // undo points and change score\n        if (lastEntry.action === 'POINT') {\n            props.statTeam === props.darkTeam ? newScore.dark-- : newScore.light--;\n        }\n        if (lastEntry.action === 'GSO' || lastEntry.action === 'GSO-MARK') {\n            props.statTeam === props.darkTeam ? newScore.light-- : newScore.dark--;\n        }\n        // show undo action\n        toast.info(`UNDO: ${lastEntry.action} by ${lastEntry.player}`);\n        // set new state\n        props.setScore(newScore);\n        props.setGameHistory(newHistory);\n    }\n\n    const saveGame = () => {\n        toast.dismiss();\n        toast.success('Game Saved', {autoClose: 2000});\n        let gameDetails = {\n            date: new Date(),\n            darkTeam: props.darkTeam,\n            lightTeam: props.lightTeam,\n            statTeam: props.statTeam,\n            gameLength: props.gameLength,\n            playerStats: props.playerStats,\n            score: props.score,\n            testGame: props.testGame,\n            statTaker: props.userID,\n            gameHistory: props.gameHistory\n        }\n        let newAllHistory = [...props.allGameHistory];\n        newAllHistory.push(gameDetails);\n        props.setAllGameHistory(newAllHistory);\n        // update the DB\n        db.get('game-history').then(doc => {\n            doc.games = newAllHistory;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(err => {\n            if (err.name === 'not_found') {\n                db.put({\n                    _id: 'game-history',\n                    games: newAllHistory\n                })\n            } else {\n                console.log(err)\n            }\n        }).then(() => props.resetGame());\n    }\n\n    return (\n        <div className='App'>\n            <div className='stats'>\n                {props.showSetup &&\n                    <GameSetup\n                        teams={props.teams}\n                        finishSetup={props.finishSetup}\n                        setTestGame={props.setTestGame}\n                    />}\n                {!props.showSetup &&\n                    <div className='game-stats'>\n                        {props.testGame &&\n                            <div id='test-notification'>\n                                <p id='test-text'>Test Game</p>\n                            </div>}\n                        <GameInfo\n                            darkTeam={props.darkTeam}\n                            lightTeam={props.lightTeam}\n                            score={props.score}\n                            gameTime={props.gameTime}\n                            gameLength={props.gameLength}\n                            startTimer={props.startTimer}\n                            pauseTimer={props.pauseTimer}   \n                            resetTimer={props.resetTimer}\n                            paused={props.paused}\n                            setPaused={props.setPaused}\n                        />\n                        <div className='game-options'>\n                            <button className='btn opt-btn'\n                                onClick={() => {\n                                    if (window.confirm('Cancel Game? Progress will not be saved.')) {\n                                        toast.dismiss();\n                                        toast.error('Game Deleted', {autoClose: 2000});\n                                        props.resetGame();\n                                    }\n                                }}>Exit Game</button>\n                            <button className='btn opt-btn'\n                                onClick={saveGame}>Finish & Save</button>\n                            <button className='btn opt-btn' \n                                onClick={handleUndo}>\n                                Undo<i className='material-icons md-18'>undo</i>\n                            </button>\n                        </div>\n                        <PlayerList\n                            offence={props.offence}\n                            playerStats={props.playerStats}\n                            setPlayerStats={props.setPlayerStats}\n                            statTeam={props.statTeam}\n                            darkTeam={props.darkTeam}\n                            handleStatClick={handleStatClick}\n                            gameHistory={props.gameHistory}\n                        />\n                    </div>}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Subs(props) {\n    return (\n        <div className='App'>\n            <h1>SUBS - TODO</h1>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\n\nconst Player = (props) => {\n\n    const [player, setPlayer] = useState(props.player);\n\n    const handlePlayerChange = (e) => {\n        setPlayer(e.target.value);\n        let newTeams = [...props.teams];\n        let teamInd = newTeams.findIndex(el => el.name === props.team.name);\n        let playerInd = parseInt(e.target.name);\n        newTeams[teamInd]['players'][playerInd] = e.target.value;\n        props.setTeams(newTeams);\n    }\n\n    return <input\n        className='player-card'\n        name={props.ind}\n        value={player}\n        onChange={handlePlayerChange} />\n}\n\nconst PlayerList = (props) => {\n\n    let players = props.team.players;\n    const listItems = players.map((player, ind) =>\n        <Player\n            player={player}\n            ind={ind}\n            key={ind}\n            teams={props.teams}\n            setTeams={props.setTeams}\n            team={props.team}\n        />\n    );\n    return <div className='player-list'>{listItems}</div>\n}\n\nexport default function Team(props) {\n\n    const [showPlayers, setShowPlayers] = useState(false);\n\n    const toggleShowPlayers = () => {\n        setShowPlayers(!showPlayers);\n    }\n\n    const saveTeam = () => {\n        props.saveTeams();\n        toggleShowPlayers();\n    }\n\n    return (\n        <div className='card team-card'>\n            <div className='team-name'>\n                <span>{`${props.team.name}`}</span>\n            </div>\n            <div className='card-info'>\n                <span className='gm-name'>{`GM: ${props.team.gm}`}</span>\n                <span className='card-link' onClick={toggleShowPlayers}>\n                    <span>Players</span>\n                    {!showPlayers && <i className=\"material-icons md-18\">arrow_drop_down</i>}\n                    {showPlayers && <i className=\"material-icons md-18\">arrow_drop_up</i>}\n                </span>\n            </div>\n            {showPlayers &&\n                <div className='card-players'>\n                    <PlayerList\n                        team={props.team}\n                        teams={props.teams}\n                        setTeams={props.setTeams}\n                    />\n                    <button className='btn btn-del' name={props.ind} onClick={props.deleteTeam}>Delete Team</button>\n                    <button className='btn' onClick={saveTeam}>Save Changes</button>\n                </div>\n                }\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport Team from './Team';\nimport '../styles/Teams.css'\n\nconst TeamList = (props) => {\n    const teams = props.teams.map((team, ind) =>\n    <Team\n        team={team}\n        ind={ind}\n        key={team.name}\n        teams={props.teams}\n        setTeams={props.setTeams}\n        saveTeams={props.saveTeams}\n        deleteTeam={props.deleteTeam}\n    />);\n    return (\n        <div className='team-list'>{teams}</div>\n    )\n}\n\nexport default function Teams(props) {\n\n    const db = props.localDB;\n\n    const [teamName, setTeamName] = useState('');\n    const [teamGM, setTeamGM] = useState('');\n    const [showAddTeam, setShowAddTeam] = useState(false);\n\n    const teamPlayers = [\n        'Player1',\n        'Player2',\n        'Player3',\n        'Player4',\n        'Player5',\n        'Player6',\n        'Player7',\n        'Player8',\n        'Player9',\n        'Player10'\n    ];\n\n    const handleInputChange = (e) => {\n        switch (e.target.name) {\n            case 'team-name':\n                setTeamName(e.target.value);\n                break;\n            case 'team-gm':\n                setTeamGM(e.target.value);\n                break;\n            default:\n                console.log('State not updated!');\n        }\n    }\n\n    const updateTeams = (teams) => {\n        db.get('team-doc').then(doc => {\n            doc.teams = teams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(err => {\n            if (err.name === 'not_found') {\n                db.put({\n                    _id: 'team-doc',\n                    teams: teams\n                })\n                console.log('New Team doc created')\n            } else {\n                console.log(err);\n            }\n        })\n    }\n\n    const createTeam = (e) => {\n        e.preventDefault();\n        let newTeams = [...props.teams];\n        newTeams.push({\n            name: teamName,\n            gm: teamGM,\n            players: teamPlayers\n        });\n        // update state with new teams\n        props.setTeams(newTeams);\n        // add teams to DB\n        updateTeams(newTeams);\n        // clear form\n        setTeamName('');\n        setTeamGM('');\n        setShowAddTeam(false);\n    }\n\n    const saveTeams = () => {\n        console.log('Saving Teams');\n        let newTeams = [...props.teams];\n        db.get('team-doc').then(doc => {\n            doc.teams = newTeams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(e => console.log(e))\n    }\n\n    const deleteTeam = (e) => {\n        let teamInd = parseInt(e.target.name);\n        let newTeams = [...props.teams];\n        newTeams.splice(teamInd, 1);\n        props.setTeams(newTeams);\n        db.get('team-doc').then(doc => {\n            doc.teams = newTeams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(e => console.log(e))\n    }\n\n    return (\n        <div className='App'>\n            <TeamList\n                teams={props.teams}\n                setTeams={props.setTeams}\n                saveTeams={saveTeams}\n                deleteTeam={deleteTeam}\n            />\n            {!showAddTeam && \n            <button className='btn' onClick={() => {setShowAddTeam(true)}}>Add Team</button>}\n            {showAddTeam && \n            <div className='add-team-form'>\n                <label htmlFor='team-name'>Team Name: </label>\n                <input name='team-name' onChange={handleInputChange} value={teamName}/>\n                <label htmlFor='team-gm'>Team GM: </label>\n                <input name='team-gm' onChange={handleInputChange} value={teamGM}/>\n                <button className='btn' onClick={createTeam}>Create Team</button>\n                <button className='btn nmt' onClick={() => setShowAddTeam(false)}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n","import React from 'react'\nimport { CSVLink } from 'react-csv';\n\nconst GameList = (props) => {\n    const games = props.games.map((game) => {\n        let gameDate = new Date(game.date);\n        let fileName = `${gameDate.getFullYear()}-${gameDate.getMonth()+1}-${gameDate.getDay()}-${game.darkTeam}-vs-${game.lightTeam}-${game.statTaker}.csv`\n        return (\n            <div key={game.date} className='card'>\n                <span>{new Date(game.date).toDateString()}</span>\n                <span>{`Stat Taker: ${game.statTaker}`}</span>\n                {game.testGame && <span>Test Game</span>}\n                <p>{`Final Score`}</p>\n                <span>{`${game.lightTeam} - ${game.score.light}`}</span>\n                <span>{`${game.darkTeam} - ${game.score.dark}`}</span>\n                <CSVLink\n                    data={game.gameHistory}\n                    filename={fileName}\n                    target='_blank'\n                >Download Game CSV</CSVLink>\n            </div>\n        )\n    }\n    )\n    return <div className='team-list'>{games}</div>\n}\n\nexport default function Games(props) {\n    return (\n        <div className='App'>\n            <h1>Recorded Games</h1>\n            <GameList games={props.allGameHistory} />\n        </div>\n    )\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  NavLink\n} from \"react-router-dom\";\nimport './styles/App.css';\nimport PouchDB from 'pouchdb';\nimport Home from './Components/Home';\nimport Stats from './Components/Stats';\nimport Subs from './Components/Subs';\nimport Teams from './Components/Teams';\nimport Games from './Components/Games';\nimport Timer from 'easytimer.js';\nimport { ToastContainer, cssTransition } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Slide = cssTransition({\n  enter: 'toast-in',\n  exit: 'toast-out',\n  duration: [500, 100]\n})\n\nfunction App() {\n\n  const DB_HOST = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5984' :\n    'https://db-couchdb.duckdns.org';\n\n  // set state\n  const [loadingDB, setLoadingDB] = useState(true);\n  const [userID, setUserID] = useState(localStorage.getItem('userID') || '');\n  const [remoteDB] = useState(new PouchDB(`${DB_HOST}/ultimate-stats`));\n  const [localDB] = useState(new PouchDB('ultimate-stats'));\n  const [teams, setTeams] = useState([]);\n  const [allGameHistory, setAllGameHistory] = useState([]);\n  const [gameLength, setGameLength] = useState(25); //1 for testing\n  const [darkTeam, setDarkTeam] = useState(\"\"); //test str Dark Team\n  const [lightTeam, setLightTeam] = useState(\"\"); // test str Light Team\n  const [showSetup, setShowSetup] = useState(true); //set false for testing\n  const [statTeam, setStatTeam] = useState(''); //test str testDark\n  // try playerStats instead of stat players - hardcode for testing\n  const [playerStats, setPlayerStats] = useState([]);\n  const [offence, setOffence] = useState(true);\n  const [score, setScore] = useState({\n    'dark': 0,\n    'light': 0\n  });\n  const [gameHistory, setGameHistory] = useState([]);\n  const [gameTime, setGameTime] = useState('');\n  const [paused, setPaused] = useState(false);\n  const [testGame, setTestGame] = useState(false);\n  const [gameTimer, setGameTimer] = useState(new Timer({\n    countdown: true,\n    callback: (timer) => {\n      setGameTime(timer.getTimeValues().toString(['minutes', 'seconds']))\n    }\n  }));\n\n  // gameTimer.addEventListener(\"secondsUpdated\", (e) => {\n  //   setGameTime(gameTimer.getTimeValues().toString(['minutes', 'seconds']))\n  // })\n\n  const getData = useCallback(() => {\n    if (!remoteDB) return;\n    setLoadingDB(true)\n    remoteDB.allDocs({ include_docs: true }).then(res => {\n      console.log('Documents fetched');\n      console.log(res);\n      setLoadingDB(false);\n      res.rows.forEach(row => {\n        if (row.doc._id === 'team-doc') setTeams(row.doc.teams);\n        if (row.doc._id === 'game-history') setAllGameHistory(row.doc.games);\n      })\n    })\n  }, [remoteDB])\n\n  // get data from the DB when ready\n  useEffect(() => {\n    if (!remoteDB) return;\n    remoteDB.info();\n    getData();\n  }, [remoteDB, getData])\n\n  // handle remote document update\n  const handleRemoteUpdate = (doc) => {\n    // TODO update the state on remote update.\n    console.log(doc)\n  }\n\n  // Effect for handling remote DB changes\n  useEffect(() => {\n    if (loadingDB || !localDB || !remoteDB) return;\n    let dbSync;\n    dbSync = localDB.sync(remoteDB, {\n      live: true,\n      retry: true,\n      include_docs: true,\n    }).on('change', (e) => {\n      console.log('Database Change');\n      console.log(e);\n      let changedDoc = e.change.docs[0];\n      if (e.direction === 'pull') {\n        handleRemoteUpdate(changedDoc);\n        console.log(`Updated: ${changedDoc._id}`);\n      } else {\n        console.log('This was a local change');\n      }\n    }).on('active', () => console.log('Sync Active'))\n      .on('error', () => console.log('Database Sync Error'));\n    return () => {\n      dbSync.cancel();\n      console.log('Sync Cancelled');\n    };\n  }, [loadingDB, localDB, remoteDB])\n\n  // set the game clock to initial value when gameLength changes\n  useEffect(() => {\n    setGameTime(`${gameLength.toString().padStart(2, 0)}:00`);\n  }, [gameLength])\n\n  // finish the game setup and set state for stat taking\n  const finishSetup = (time, dark, light, statTeam, offence) => {\n    setGameLength(parseInt(time));\n    setDarkTeam(dark);\n    setLightTeam(light);\n    setStatTeam(statTeam);\n    setOffence(offence);\n    setShowSetup(false);\n    let findTeam = teams.find(team => team.name === statTeam)\n    let initPlayerStats = [];\n    for (let player of findTeam.players) {\n      initPlayerStats.push({\n        name: player,\n        stats: {\n          Touch: 0,\n          Assist: 0,\n          Point: 0,\n          'T-Away': 0,\n          Drop: 0,\n          'D-Play': 0,\n          GSO: 0,\n          'GSO-Mark': 0\n        }\n      })\n    }\n    setPlayerStats(initPlayerStats);\n  }\n\n  const resetGame = () => {\n    setGameLength(25);\n    gameTimer.stop();\n    setDarkTeam('');\n    setLightTeam('');\n    setStatTeam('');\n    setShowSetup(true);\n    setPlayerStats([]);\n    setGameHistory([]);\n    setGameTime('25:00');\n    setPaused(false);\n    setTestGame(false);\n    setScore({\n      'dark': 0,\n      'light': 0\n    })\n  }\n\n  const toggleOffence = () => {\n    setOffence(!offence);\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Home\n            userID={userID}\n            setUserID={setUserID}\n            localDB={localDB}\n          />\n        </Route>\n        <Route path='/stats'>\n          {userID ?\n            <Stats\n              userID={userID}\n              localDB={localDB}\n              teams={teams}\n              showSetup={showSetup}\n              finishSetup={finishSetup}\n              gameLength={gameLength}\n              darkTeam={darkTeam}\n              lightTeam={lightTeam}\n              statTeam={statTeam}\n              offence={offence}\n              score={score}\n              setScore={setScore}\n              allGameHistory={allGameHistory}\n              setAllGameHistory={setAllGameHistory}\n              gameHistory={gameHistory}\n              setGameHistory={setGameHistory}\n              gameTime={gameTime}\n              startTimer={() => gameTimer.start({ startValues: { minutes: gameLength } })}\n              pauseTimer={() => gameTimer.pause()}\n              stopTimer={() => gameTimer.stop()}\n              resetTimer={() => {\n                gameTimer.reset()\n                setGameTime(`${gameLength.toString().padStart(2, 0)}:00`)\n              }}\n              paused={paused}\n              setPaused={setPaused}\n              playerStats={playerStats}\n              setPlayerStats={setPlayerStats}\n              toggleOffence={toggleOffence}\n              testGame={testGame}\n              setTestGame={setTestGame}\n              resetGame={resetGame}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/subs'>\n          {userID ?\n            <Subs\n              userID={userID}\n              localDB={localDB}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/teams'>\n          {userID ?\n            <Teams\n              teams={teams}\n              setTeams={setTeams}\n              localDB={localDB}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/games'>\n          <Games\n            allGameHistory={allGameHistory}\n          />\n        </Route>\n      </Switch>\n      <div className='bottom-nav'>\n        <NavLink className='nav-link' to='/' exact activeClassName='nav-active'>Home</NavLink>\n        <NavLink className='nav-link' to='/stats' activeClassName='nav-active'>Stats</NavLink>\n        <NavLink className='nav-link' to='/subs' activeClassName='nav-active'>Subs</NavLink>\n        <NavLink className='nav-link' to='/teams' activeClassName='nav-active'>Teams</NavLink>\n        <NavLink className='nav-link' to='/games' activeClassName='nav-active'>Games</NavLink>\n      </div>\n      <ToastContainer\n        position='bottom-center'\n        transition={Slide}\n        autoClose={false}\n        hideProgressBar\n        newestOnTop={false}\n        closeOnClick={false}\n        rtl={false}\n        pauseOnVisibilityChange={false}\n        draggable={false}\n        pauseOnHover={false}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}