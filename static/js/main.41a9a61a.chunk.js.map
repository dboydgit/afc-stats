{"version":3,"sources":["Components/Header.js","Components/Home.js","Components/GameSetup.js","Components/GameInfo.js","Components/Stats.js","Components/Subs.js","Components/Team.js","Components/Teams.js","Components/StatTable.js","Components/Games.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Home","props","useState","userVal","setUserVal","userID","onSubmit","e","preventDefault","setUserID","localStorage","setItem","id","type","value","onChange","target","to","GameSetup","time","setTime","dark","setDark","light","setLight","statTeam","setStatTeam","offence","setOffence","error","setError","teamNames","key","teams","team","push","name","htmlFor","min","max","checked","setTestGame","onClick","offenceBool","timeStr","formTime","parseInt","isValidTime","finishSetup","GameInfo","darkTeam","score","gameTime","startTimer","setPaused","console","log","paused","pauseTimer","resetTimer","lightTeam","OffenseButtons","mustTouch","noThrowaway","noTouch","noDrop","prevEntry","action","turnover","player","handleStatClick","Touch","Assist","Point","Drop","DefenceButtons","GSO","PlayerList","list","playerStats","map","offense","Stats","window","onbeforeunload","showSetup","returnValue","showAddPlayer","setShowAddPlayer","newPlayer","setNewPlayer","setPrevEntry","toast","dismiss","currentTarget","newHistory","gameHistory","lastEntry","length","lastPlayer","newScore","setScore","Date","historyEntry","date","toDateString","toTimeString","newPlayerStats","forEach","el","setPlayerStats","success","toggleOffense","setGameHistory","testGame","gameLength","confirm","autoClose","resetGame","gameDetails","statTaker","newAllHistory","allGameHistory","unshift","setAllGameHistory","saveAllGames","pop","info","newPrevEntry","placeholder","addStatPlayer","Subs","Player","setPlayer","deletePlayer","ind","newTeams","teamInd","findIndex","playerInd","setTeams","listItems","players","Team","showPlayers","setShowPlayers","toggleShowPlayers","gm","splice","deleteTeam","saveTeams","TeamList","Teams","db","localDB","teamName","setTeamName","teamGM","setTeamGM","showAddTeam","setShowAddTeam","teamPlayers","handleInputChange","get","then","doc","put","res","catch","err","_id","StatTable","columns","useMemo","accessor","sortDescFirst","data","stats","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","DelToast","toggleDeleteGame","game","closeToast","GameCard","showStats","setShowStats","gameDate","fileName","getFullYear","getMonth","getDay","statFileName","toggleShowStats","filename","label","hideProgressBar","GameList","games","filter","deleted","Games","Slide","cssTransition","enter","exit","duration","App","loadingDB","setLoadingDB","getItem","PouchDB","remoteDB","setGameLength","setDarkTeam","setLightTeam","setShowSetup","setOffense","setGameTime","Timer","countdown","callback","timer","getTimeValues","toString","gameTimer","getData","useCallback","allDocs","include_docs","useEffect","dbSync","sync","live","retry","on","changedDoc","change","docs","direction","cancel","padStart","path","exact","findTeam","find","initPlayerStats","start","startValues","minutes","pause","stopTimer","stop","reset","activeClassName","position","transition","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41a9a61a.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Header.css';\n\nexport default function Header() {\n    return (\n        <header className='app-header'>\n            <h1>AFC Premier League Stats</h1>\n        </header>\n    )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Home.css';\nimport Header from './Header';\n\nexport default function Home(props) {\n\n    const [userVal, setUserVal] = useState('');\n\n    // set the userID on form submit\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        props.setUserID(userVal);\n        localStorage.setItem('userID', userVal);\n    }\n\n    // update state on form change\n    const handleChange = (e) => {\n        setUserVal(e.target.value);\n    }\n\n    return (\n        <div className='App'>\n            <Header />\n            <div className='home-content'>\n                {!props.userID &&\n                    <div className='home-form'>\n                        <p>Who is taking stats?</p>\n                        <form onSubmit={handleSubmit}>\n                            <input id='home-input' type='text' value={userVal} onChange={handleChange} />\n                            <button className='btn' type='submit'>Start</button>\n                        </form>\n                    </div>\n                }\n                {props.userID &&\n                    <div>\n                        <p>{`Welcome, ${props.userID}`}</p>\n                        <div className=\"home-btn-group\">\n                            <Link\n                                className='btn'\n                                to='/stats'>Stats\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/subs'>Subs\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/teams'>Teams\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/games'>Past Games\n                            </Link>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport '../styles/GameSetup.css';\n\nexport default function GameSetup(props) {\n\n    const [time, setTime] = useState('25');\n    const [dark, setDark] = useState('');\n    const [light, setLight] = useState('');\n    const [statTeam, setStatTeam] = useState('');\n    const [offence, setOffence] = useState('');\n    const [error, setError] = useState('');\n\n    let teamNames = [<option value='' key=''></option>];\n    for (let team of props.teams) {\n        teamNames.push(<option value={team.name} key={team.name}>{team.name}</option>);\n    }\n\n    const isValidTime = (timeStr) => {\n        let formTime = parseInt(timeStr);\n        if (formTime >= 1 && formTime <= 120) return true;\n        else return false;\n    }\n\n    const submitFinish = () => {\n        if (!isValidTime(time)) {\n            setError('Time should be between 1 - 120 mins')\n            return;\n        }\n        if (!dark || !light || !statTeam || !offence) {\n            setError('Please choose all options');\n            return;\n        }\n        let offenceBool;\n        statTeam === offence ? offenceBool = true : offenceBool = false;\n        props.finishSetup(time, dark, light, statTeam, offenceBool);\n    }\n\n    const handleCheck = (e) => {\n        e.target.checked ? props.setTestGame(true) : props.setTestGame(false);\n    }\n\n    return (\n        <div className='game-setup card'>\n            <h3 id='setup-title'>Game Setup</h3>\n            <label htmlFor='game-length'>Game Length (mins)</label>\n            <input name='game-length' type='number' min='1' max='120'\n                value={time} onChange={(e) => setTime(e.target.value)} />\n            <label htmlFor='dark-team'>Select Dark Team</label>\n            <select name='dark-team' value={dark}\n                onChange={(e) => setDark(e.target.value)}>{teamNames}</select>\n            <label htmlFor='light-team'>Select Light Team</label>\n            <select name='light-team' value={light}\n                onChange={(e) => setLight(e.target.value)}>{teamNames}</select>\n                     \n            <label htmlFor='stat-team'>Taking Stats For</label>\n            <select name='stat-team' value={statTeam}\n                onChange={(e) => setStatTeam(e.target.value)}>\n                <option></option>\n                <option>{`${dark}`}</option>\n                <option>{`${light}`}</option>\n            </select>\n            <label htmlFor='offence-team'>Team on Offence</label>\n            <select name='offence-team' value={offence}\n                onChange={(e) => setOffence(e.target.value)}>\n                <option></option>\n                <option>{`${dark}`}</option>\n                <option>{`${light}`}</option>\n            </select>\n            <div id='test-game-checkbox' onChange={handleCheck}>\n                <input type='checkbox'/>\n                <span>Check for test game</span>\n            </div>\n            <button className='btn' onClick={submitFinish}>Finish Setup</button>\n            {error &&\n                <span className='form-err'>{error}</span>}   \n        </div>\n    )\n}\n","import React from 'react';\n\n\nexport default function GameInfo(props) {\n\n    return (\n        <div className='game-info'>\n            <div className='score-card dark'>\n                <span id='team-name'>{props.darkTeam}</span>\n                <span className='score dark'>{props.score.dark}</span>\n            </div>\n            <div className='game-clock'>\n                <span>{`${props.gameTime}`}</span>\n                <div className='timer-controls'>\n                    <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.startTimer();\n                            props.setPaused(false);\n                            console.log('start timer')\n                        }}>play_arrow</i>\n                    {!props.paused && <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.pauseTimer();\n                            props.setPaused(true);\n                            console.log('pause timer')\n                        }}>pause</i>}\n                    {props.paused && <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.resetTimer();\n                            props.pauseTimer();\n                            props.setPaused(false);\n                            console.log('reset timer')\n                        }}>replay</i>}\n                </div>\n            </div>\n            <div className='score-card light'>\n                <span id='team-name'>{props.lightTeam}</span>\n                <span className='score light'>{props.score.light}</span>\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport GameSetup from './GameSetup';\nimport GameInfo from './GameInfo';\nimport '../styles/Stats.css';\nimport { toast } from 'react-toastify';\n\nconst OffenseButtons = (props) => {\n\n    let mustTouch = false;\n    let noThrowaway = true;\n    let noTouch = false;\n    let noDrop = false;\n\n    if (!props.prevEntry.action || props.prevEntry.turnover) mustTouch = true;\n    if (!props.prevEntry.turnover && props.prevEntry.player === props.player.name) {\n        noTouch = true;\n        noThrowaway = false;\n        noDrop = true;\n    }\n\n    return (\n        <div className='stat-btns'>\n            <button\n                className={`btn stat-btn ${noTouch ? 'btn-inactive' : ''}`}\n                name='Touch'\n                onClick={(e) => props.handleStatClick(e, props.player.name, false)}>\n                Touch\n                    <div className='score-badge'>{props.player.Touch}</div>\n                {props.player.Assist !== 0 &&\n                    <div className='score-badge assist'>{`${props.player.Assist}-A`}</div>}\n            </button>\n            <button\n                className={`btn stat-btn ${mustTouch ? 'btn-inactive' : ''}`}\n                name='Point'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                Point\n                    <div className='score-badge'>{props.player.Point}</div>\n            </button>\n            <button\n                className={`btn stat-btn ${mustTouch || noThrowaway ? 'btn-inactive' : ''}`}\n                name='T-Away'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                T-Away\n                    <div className='score-badge'>{props.player['T-Away']}</div>\n            </button>\n            <button\n                className={`btn stat-btn ${mustTouch || noDrop ? 'btn-inactive' : ''}`}\n                name='Drop'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                Drop\n                    <div className='score-badge'>{props.player.Drop}</div>\n            </button>\n        </div>\n    )\n}\n\nconst DefenceButtons = (props) => {\n\n    return (\n        <div className='stat-btns'>\n            <button\n                className='btn stat-btn'\n                name='D-Play'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                D-Play\n                    <div className='score-badge'>{props.player['D-Play']}</div>\n            </button>\n            <button\n                className='btn stat-btn'\n                name='GSO'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                GSO\n                    <div className='score-badge'>{props.player.GSO}</div>\n            </button>\n            <button\n                className='btn stat-btn'\n                name='GSO-Mark'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                GSO-Mark\n                    <div className='score-badge'>{props.player['GSO-Mark']}</div>\n            </button>\n        </div>\n    )\n}\n\nconst PlayerList = (props) => {\n    const playerStats = props.playerStats;\n    const list = playerStats.map(player =>\n        <div key={player.name} className='player-input'>\n            <div\n                className={`player-name ${props.darkTeam === props.statTeam ? 'dark' : ''}`}\n            >\n                <span className='player-text'>{player.name}</span>\n            </div>\n            {props.offense &&\n                <OffenseButtons\n                    player={player}\n                    handleStatClick={props.handleStatClick}\n                    prevEntry={props.prevEntry}\n                />}\n            {!props.offense &&\n                <DefenceButtons\n                    player={player}\n                    handleStatClick={props.handleStatClick}\n                />}\n        </div>\n    )\n    return (\n        <div className='player-list'>{list}</div>\n    )\n}\n\nexport default function Stats(props) {\n\n    // show warning on page reload attempt during game\n    window.onbeforeunload = (e) => {\n        if (!props.showSetup) e.returnValue = 'Game will not be saved.';\n    }\n\n    const [showAddPlayer, setShowAddPlayer] = useState(false);\n    const [newPlayer, setNewPlayer] = useState('');\n    let [prevEntry, setPrevEntry] = useState({\n        action: '',\n        player: '',\n        turnover: false\n    })\n\n    const handleStatClick = (e, player = '', turnover = true) => {\n        toast.dismiss();\n        let action = e.currentTarget.name;\n        // set the game history\n        let newHistory = [...props.gameHistory];\n        // get the last entry and set player if available\n        let lastEntry = newHistory[newHistory.length - 1] || '';\n        let lastPlayer = '';\n        // set last thrower for Point and Drop\n        if (lastEntry && (action === 'Point' || action === 'Drop')) {\n            lastPlayer = lastEntry.player;\n        }\n        // Validate first action of a possession is a touch\n        if (props.offense && action !== 'Touch' && (lastEntry.turnover || !newHistory.length)) {\n            toast.error('First action of a possession must be a touch');\n            return;\n        }\n        // set last thrower for touch (if not right after turnover)\n        if (action === 'Touch' && !lastEntry.turnover) {\n            if (player === lastEntry.player) {\n                toast.error(\"Cannot touch the disc twice in a row\");\n                return;\n            } else {\n                lastPlayer = lastEntry.player;\n            }\n        }\n        // Validate throwaway was by lastPlayer\n        if (action === 'T-Away') {\n            if (lastEntry.action !== 'Touch') {\n                toast.error('Throwaway can only be recorded following a touch');\n                return;\n            } else if (lastEntry.player !== player) {\n                console.log(lastEntry.player)\n                toast.error(`Only player in possession (${lastEntry.player}) can throwaway`)\n                return;\n            }\n        }\n        // set the score for point, GSO\n        let newScore = { ...props.score };\n        if (action === 'Point') {\n            props.statTeam === props.darkTeam ? newScore.dark++ : newScore.light++;\n        }\n        if (action === 'GSO' || action === 'GSO-Mark') {\n            props.statTeam === props.darkTeam ? newScore.light++ : newScore.dark++;\n        }\n        props.setScore(newScore);\n        // add action to game history\n        let time = new Date();\n        let historyEntry = {\n            date: time.toDateString(),\n            time: time.toTimeString(),\n            gameTime: props.gameTime,\n            statTeam: props.statTeam,\n            [`${props.darkTeam}_score`]: newScore.dark,\n            [`${props.lightTeam}_score`]: newScore.light,\n            action: action,\n            player: player,\n            lastPlayer: lastPlayer,\n            turnover: turnover,\n        }\n        // set new player stats\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.forEach(el => {\n            if (el.name === player) {\n                if (action === 'Drop') el.Touch++;\n                el[action]++;\n            }\n            if (action === 'Point' && el.name === lastPlayer) el.Assist++;\n        })\n        props.setPlayerStats(newPlayerStats);\n        // log entry to console\n        console.log(`${player}: ${action}: gameClock: ${props.gameTime}: \n            time: ${historyEntry.time}`)\n\n        toast.success(`Last Entry: ${action}${player ? ' - ' + player : ''} ${lastPlayer ? ' from ' + lastPlayer : ''}`)\n        setPrevEntry({action: action, player: player, turnover: turnover}); \n        if (turnover) props.toggleOffense();\n        newHistory.push(historyEntry);\n        props.setGameHistory(newHistory);\n    }\n\n    const handleUndo = () => {\n        toast.dismiss();\n        let newHistory = [...props.gameHistory];\n        let newScore = { ...props.score };\n        // remove last entry from game history\n        let lastEntry = newHistory.pop();\n        if (!lastEntry) {\n            toast.info('Nothing to undo');\n            return;\n        }\n        console.log('UNDO')\n        // undo playerStats count\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.forEach(el => {\n            if (el.name === lastEntry.player) {\n                if (lastEntry.action === 'Drop') el.Touch--;\n                el[lastEntry.action]--;\n            }\n            if (lastEntry.action === 'Point' && lastEntry.lastPlayer === el.name) {\n                el.Assist--;\n            }\n        })\n        props.setPlayerStats(newPlayerStats);\n        // undo turnover and change buttons\n        if (lastEntry.turnover) props.toggleOffense();\n        // undo points and change score\n        if (lastEntry.action === 'Point') {\n            props.statTeam === props.darkTeam ? newScore.dark-- : newScore.light--;\n        }\n        if (lastEntry.action === 'GSO' || lastEntry.action === 'GSO-Mark') {\n            props.statTeam === props.darkTeam ? newScore.light-- : newScore.dark--;\n        }\n        // show undo action\n        toast.info(`UNDO: ${lastEntry.action} by ${lastEntry.player}`);\n        // set new state\n        props.setScore(newScore);\n        props.setGameHistory(newHistory);\n        if (!newHistory.length) setPrevEntry({action:'', player:'', turnover: false});\n        else {\n            let newPrevEntry = newHistory[newHistory.length - 1];\n            setPrevEntry({\n                action: newPrevEntry.action,\n                player: newPrevEntry.player,\n                turnover: newPrevEntry.turnover\n            })\n        }\n    }\n\n    const saveGame = () => {\n        toast.dismiss();\n        toast.success('Game Saved', { autoClose: 2000 });\n        let gameDetails = {\n            date: new Date(),\n            darkTeam: props.darkTeam,\n            lightTeam: props.lightTeam,\n            statTeam: props.statTeam,\n            gameLength: props.gameLength,\n            playerStats: props.playerStats,\n            score: props.score,\n            testGame: props.testGame,\n            statTaker: props.userID,\n            gameHistory: props.gameHistory\n        }\n        let newAllHistory = [...props.allGameHistory];\n        newAllHistory.unshift(gameDetails);\n        props.setAllGameHistory(newAllHistory);\n        // update the DB\n        props.saveAllGames(newAllHistory);\n        props.resetGame();\n    }\n\n    const addStatPlayer = (player) => {\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.push({\n            name: player,\n            Touch: 0,\n            Assist: 0,\n            Point: 0,\n            'T-Away': 0,\n            Drop: 0,\n            'D-Play': 0,\n            GSO: 0,\n            'GSO-Mark': 0\n        })\n        props.setPlayerStats(newPlayerStats);\n        setShowAddPlayer(false);\n        setNewPlayer('');\n    }\n\n    return (\n        <div className='App'>\n            <div className='stats'>\n                {props.showSetup &&\n                    <GameSetup\n                        teams={props.teams}\n                        finishSetup={props.finishSetup}\n                        setTestGame={props.setTestGame}\n                    />}\n                {!props.showSetup &&\n                    <div className='game-stats'>\n                        {props.testGame &&\n                            <div id='test-notification'>\n                                <p id='test-text'>Test Game</p>\n                            </div>}\n                        <GameInfo\n                            darkTeam={props.darkTeam}\n                            lightTeam={props.lightTeam}\n                            score={props.score}\n                            gameTime={props.gameTime}\n                            gameLength={props.gameLength}\n                            startTimer={props.startTimer}\n                            pauseTimer={props.pauseTimer}\n                            resetTimer={props.resetTimer}\n                            paused={props.paused}\n                            setPaused={props.setPaused}\n                        />\n                        <div className='game-options'>\n                            <button className='btn opt-btn'\n                                onClick={() => {\n                                    if (window.confirm('Cancel Game? Progress will not be saved.')) {\n                                        toast.dismiss();\n                                        toast.error('Game Deleted', { autoClose: 2000 });\n                                        props.resetGame();\n                                    }\n                                }}>Exit Game</button>\n                            <button className='btn opt-btn'\n                                onClick={saveGame}>Finish & Save</button>\n                            <button className='btn opt-btn'\n                                onClick={handleUndo}>\n                                Undo<i className='material-icons md-18'>undo</i>\n                            </button>\n                        </div>\n                        <PlayerList\n                            offense={props.offense}\n                            playerStats={props.playerStats}\n                            setPlayerStats={props.setPlayerStats}\n                            statTeam={props.statTeam}\n                            darkTeam={props.darkTeam}\n                            handleStatClick={handleStatClick}\n                            gameHistory={props.gameHistory}\n                            // use current entry to track and disable correct buttons...\n                            prevEntry={prevEntry}\n                        />\n                        {!props.offense &&\n                            <button\n                                className='btn stat-btn stat-btn-after'\n                                name='O-Error'\n                                onClick={(e) => handleStatClick(e)}>\n                                Offensive Error\n                        </button>\n                        }\n                        {!showAddPlayer && <button\n                            className='btn stat-btn stat-btn-after'\n                            onClick={() => setShowAddPlayer(true)}\n                        >Add Player</button>}\n                        {showAddPlayer &&\n                            <div className='add-player-input'>\n                                <i className='material-icons'\n                                    onClick={() => setShowAddPlayer(false)}>close</i>\n                                <input\n                                    placeholder='player name'\n                                    onChange={(e) => setNewPlayer(e.target.value)}\n                                    value={newPlayer}></input>\n                                <button\n                                    className='btn stat-btn stat-btn-after'\n                                    onClick={() => addStatPlayer(newPlayer)}>Save</button>\n                            </div>\n                        }\n                    </div>}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Subs(props) {\n    return (\n        <div className='App'>\n            <h1 className='page-header'>SUBS - TODO</h1>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\n\nconst Player = (props) => {\n\n    const [player, setPlayer] = useState(props.player);\n\n    const handlePlayerChange = (e) => {\n        setPlayer(e.target.value);\n        let newTeams = [...props.teams];\n        let teamInd = newTeams.findIndex(el => el.name === props.team.name);\n        let playerInd = parseInt(e.target.name);\n        newTeams[teamInd]['players'][playerInd] = e.target.value;\n        props.setTeams(newTeams);\n    }\n\n    return (\n        <div className='player-list-item'>\n            <i  className='material-icons player-del'\n                onClick={() => {\n                    props.deletePlayer(player);\n                }}>delete</i>\n            <input\n                className='player-card'\n                name={props.ind}\n                value={player}\n                onChange={handlePlayerChange}\n            />\n        </div>\n    )\n}\n\nconst PlayerList = (props) => {\n\n    let players = props.team.players;\n    const listItems = players.map((player, ind) =>\n        <Player\n            player={player}\n            ind={ind}\n            key={ind}\n            teams={props.teams}\n            setTeams={props.setTeams}\n            team={props.team}\n            deletePlayer={props.deletePlayer}\n        />\n    );\n    return <div className='player-list'>{listItems}</div>\n}\n\nexport default function Team(props) {\n\n    const [showPlayers, setShowPlayers] = useState(false);\n\n    const toggleShowPlayers = () => {\n        setShowPlayers(!showPlayers);\n    }\n\n    const saveTeam = () => {\n        props.saveTeams();\n        toggleShowPlayers();\n    }\n\n    const addPlayer = () => {\n        // add player to teams state\n        let newTeams = [...props.teams];\n        for (let team of newTeams) {\n            if (team.name === props.team.name) {\n                team.players.push('New Player');\n                continue;\n            }\n        }\n        props.setTeams(newTeams);\n    }\n\n    const deletePlayer = (player) => {\n        // delete player from state\n        let newTeams = [...props.teams];\n        for (let team of newTeams) {\n            if (team.name === props.team.name) {\n                let ind = team.players.findIndex(el => el === player);\n                team.players.splice(ind, 1);\n                continue;\n            }\n        }\n        props.setTeams(newTeams);\n    }\n\n    return (\n        <div className='card team-card'>\n            <div className='team-name'>\n                <span>{`${props.team.name}`}</span>\n            </div>\n            <div className='card-info'>\n                <span className='gm-name'>{`GM: ${props.team.gm}`}</span>\n                <span className='card-link' onClick={toggleShowPlayers}>\n                    <span>Players</span>\n                    {!showPlayers && <i className=\"material-icons md-18\">arrow_drop_down</i>}\n                    {showPlayers && <i className=\"material-icons md-18\">arrow_drop_up</i>}\n                </span>\n            </div>\n            {showPlayers &&\n                <div className='card-players'>\n                    <PlayerList\n                        team={props.team}\n                        teams={props.teams}\n                        setTeams={props.setTeams}\n                        deletePlayer={deletePlayer}\n                    />\n                    <button className='btn team-btn btn-del' name={props.ind} onClick={props.deleteTeam}>Delete Team</button>\n                    <button className='btn team-btn' onClick={addPlayer}>Add Player</button>\n                    <button className='btn team-btn' onClick={saveTeam}>Save Changes</button>\n                </div>\n            }\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport Team from './Team';\nimport '../styles/Teams.css'\n\nconst TeamList = (props) => {\n    const teams = props.teams.map((team, ind) =>\n    <Team\n        team={team}\n        ind={ind}\n        key={team.name}\n        teams={props.teams}\n        setTeams={props.setTeams}\n        saveTeams={props.saveTeams}\n        deleteTeam={props.deleteTeam}\n    />);\n    return (\n        <div className='team-list'>{teams}</div>\n    )\n}\n\nexport default function Teams(props) {\n\n    const db = props.localDB;\n\n    const [teamName, setTeamName] = useState('');\n    const [teamGM, setTeamGM] = useState('');\n    const [showAddTeam, setShowAddTeam] = useState(false);\n\n    const teamPlayers = [\n        'Player1',\n        'Player2',\n        'Player3',\n        'Player4',\n        'Player5',\n        'Player6',\n        'Player7',\n        'Player8',\n        'Player9',\n        'Player10'\n    ];\n\n    const handleInputChange = (e) => {\n        switch (e.target.name) {\n            case 'team-name':\n                setTeamName(e.target.value);\n                break;\n            case 'team-gm':\n                setTeamGM(e.target.value);\n                break;\n            default:\n                console.log('State not updated!');\n        }\n    }\n\n    const updateTeams = (teams) => {\n        db.get('team-doc').then(doc => {\n            doc.teams = teams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(err => {\n            if (err.name === 'not_found') {\n                db.put({\n                    _id: 'team-doc',\n                    teams: teams\n                })\n                console.log('New Team doc created')\n            } else {\n                console.log(err);\n            }\n        })\n    }\n\n    const createTeam = (e) => {\n        e.preventDefault();\n        let newTeams = [...props.teams];\n        newTeams.push({\n            name: teamName,\n            gm: teamGM,\n            players: teamPlayers\n        });\n        // update state with new teams\n        props.setTeams(newTeams);\n        // add teams to DB\n        updateTeams(newTeams);\n        // clear form\n        setTeamName('');\n        setTeamGM('');\n        setShowAddTeam(false);\n    }\n\n    const saveTeams = () => {\n        console.log('Saving Teams');\n        let newTeams = [...props.teams];\n        db.get('team-doc').then(doc => {\n            doc.teams = newTeams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(e => console.log(e))\n    }\n\n    const deleteTeam = (e) => {\n        let teamInd = parseInt(e.target.name);\n        let newTeams = [...props.teams];\n        newTeams.splice(teamInd, 1);\n        props.setTeams(newTeams);\n        db.get('team-doc').then(doc => {\n            doc.teams = newTeams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(e => console.log(e))\n    }\n\n    return (\n        <div className='App'>\n            <h1 className='page-header'>Teams</h1>\n            <TeamList\n                teams={props.teams}\n                setTeams={props.setTeams}\n                saveTeams={saveTeams}\n                deleteTeam={deleteTeam}\n            />\n            {!showAddTeam && \n            <button className='btn' onClick={() => {setShowAddTeam(true)}}>Add Team</button>}\n            {showAddTeam && \n            <div className='add-team-form'>\n                <label htmlFor='team-name'>Team Name: </label>\n                <input name='team-name' onChange={handleInputChange} value={teamName}/>\n                <label htmlFor='team-gm'>Team GM: </label>\n                <input name='team-gm' onChange={handleInputChange} value={teamGM}/>\n                <button className='btn' onClick={createTeam}>Create Team</button>\n                <button className='btn nmt' onClick={() => setShowAddTeam(false)}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function StatTable(props) {\n\n    const columns = useMemo(() => [\n        { Header: 'Name', accessor: 'name' },\n        { Header: 'Point', accessor: 'Point', sortDescFirst: true},\n        { Header: 'Assist', accessor: 'Assist', sortDescFirst: true },\n        { Header: 'Touch', accessor: 'Touch', sortDescFirst: true },\n        { Header: 'DPlay', accessor: 'D-Play', sortDescFirst: true },\n        { Header: 'TAway', accessor: 'T-Away', sortDescFirst: true },\n        { Header: 'Drop', accessor: 'Drop', sortDescFirst: true },\n        { Header: 'GSO', accessor: 'GSO', sortDescFirst: true },\n        { Header: 'GSO-Mark', accessor: 'GSO-Mark', sortDescFirst: true },\n    ], [])\n\n    const data = useMemo(() => props.stats, [props.stats])\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n        {\n            data,\n            columns,\n        },\n        useSortBy\n    )\n\n    return (\n        <>\n        <p className='stat-table stat-table-title'>Game Stats - Touch headers to sort</p>\n        <table className='stat-table' {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                    // Add the sorting props to control sorting. For this example\n                    // we can add them into the header props\n                    <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                        {column.isSorted\n                        ? column.isSortedDesc\n                            ? <i className=\"material-icons md-18\">arrow_drop_down</i>\n                            : <i className=\"material-icons md-18\">arrow_drop_up</i>\n                        : ''}\n                    </span>\n                    </th>\n                ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map(\n                (row, i) => {\n                prepareRow(row);\n                return (\n                    <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                        return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        )\n                    })}\n                    </tr>\n                )}\n            )}\n            </tbody>\n        </table>\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport { CSVLink } from 'react-csv';\nimport '../styles/GameList.css';\nimport StatTable from './StatTable';\nimport { toast } from 'react-toastify';\n\nconst DelToast = (props) => (\n    <>\n        <span>Game Deleted...</span>\n        <button\n            className='btn toast-btn'\n            onClick={() => {\n                props.toggleDeleteGame(props.game.date);\n                props.closeToast();\n            }}\n        >\n            Undo<i className='material-icons md-18'>undo</i>\n        </button>\n    </>\n)\n\nconst GameCard = (props) => {\n\n    const [showStats, setShowStats] = useState(false);\n\n    let game = props.game;\n    let gameDate = new Date(game.date);\n    let fileName = `${gameDate.getFullYear()}-${gameDate.getMonth() + 1}-${gameDate.getDay()}-${game.darkTeam}-vs-${game.lightTeam}-GAME-${game.statTeam}.csv`\n    let statFileName = `${gameDate.getFullYear()}-${gameDate.getMonth() + 1}-${gameDate.getDay()}-${game.darkTeam}-vs-${game.lightTeam}-STATS-${game.statTeam}.csv`\n\n    const toggleShowStats = () => setShowStats(!showStats);\n    const statHeaders = [\n        { label: 'Name', key: 'name' },\n        { label: 'Touches', key: 'Touch' },\n        { label: 'Points', key: 'Point' },\n        { label: 'Assists', key: 'Assist' },\n        { label: 'D-Plays', key: 'D-Play' },\n        { label: 'Drops', key: 'Drop' },\n        { label: 'Throwaways', key: 'T-Away' },\n        { label: 'GSO', key: 'GSO' },\n        { label: 'GSO-Mark', key: 'GSO-Mark' },\n    ]\n\n    return (\n        <div className='card game-list-card'>\n            <div className='game-list-info'>\n                <span>{new Date(game.date).toDateString()}</span>\n                <span>{`Stat Taker: ${game.statTaker}`}</span>\n            </div>\n            <div className='game-list-info'>\n                <span>{`Stats For: ${game.statTeam}`}</span>\n                {game.testGame && <span className='test-game'>Test Game</span>}\n            </div>\n            <div className='game-score'>\n                <div className='score-card score-card-games dark'>\n                    <span id='team-name'>{game.darkTeam}</span>\n                    <span className='score dark'>{game.score.dark}</span>\n                </div>\n                <div className='score-card score-card-games light'>\n                    <span id='team-name'>{game.lightTeam}</span>\n                    <span className='score light'>{game.score.light}</span>\n                </div>\n            </div>\n            <div className='game-list-btns'>\n                <CSVLink\n                    className='btn game-list-btn'\n                    data={game.gameHistory}\n                    filename={fileName}\n                    target='_blank'\n                >\n                    Game CSV\n                    <i className=\"material-icons md-18\">get_app</i>\n                </CSVLink>\n                <CSVLink\n                    className='btn game-list-btn'\n                    data={game.playerStats}\n                    headers={statHeaders}\n                    filename={statFileName}\n                    target='_blank'\n                >\n                    Stats CSV\n                    <i className=\"material-icons md-18\">get_app</i></CSVLink>\n                {!showStats && <button\n                    className='btn game-list-btn'\n                    onClick={toggleShowStats}\n                >\n                    Show Stats<i className=\"material-icons md-18\">arrow_drop_down</i>\n                </button>}\n                {showStats && <button\n                    className='btn game-list-btn'\n                    onClick={toggleShowStats}\n                >\n                    Hide Stats<i className=\"material-icons md-18\">arrow_drop_up</i>\n                </button>}\n            </div>\n            {showStats &&\n                <>\n                    <StatTable stats={game.playerStats} />\n                    <button\n                        className='btn btn-del game-list-btn'\n                        onClick={() => {\n                            props.toggleDeleteGame(game.date);\n                            toast.error(\n                                <DelToast\n                                    game={game}\n                                    toggleDeleteGame={props.toggleDeleteGame}\n                                />, {autoClose: 4000, hideProgressBar:false});\n                        }}>Delete Game</button>\n                </>\n            }\n        </div>\n    )\n}\n\nconst GameList = (props) => {\n    const showGames = props.games.filter(game => !game.deleted);\n    const games = showGames.map((game) =>\n        <GameCard key={game.date} game={game} toggleDeleteGame={props.toggleDeleteGame} />\n    )\n    return <div className='team-list'>{games}</div>\n}\n\nexport default function Games(props) {\n\n    const toggleDeleteGame = (gameDate) => {\n        // update local state\n        let newAllHistory = [...props.allGameHistory];\n        for (let game of newAllHistory) {\n            if (game.date === gameDate) game.deleted = !game.deleted;\n            continue;\n        }\n        props.setAllGameHistory(newAllHistory);\n        // save to the DB\n        props.saveAllGames(newAllHistory)\n    }\n\n    return (\n        <div className='App'>\n            <h1 className='page-header'>Recorded Games</h1>\n            <GameList\n                games={props.allGameHistory}\n                toggleDeleteGame={toggleDeleteGame}\n            />\n        </div>\n    )\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  NavLink\n} from \"react-router-dom\";\nimport './styles/App.css';\nimport PouchDB from 'pouchdb';\nimport Home from './Components/Home';\nimport Stats from './Components/Stats';\nimport Subs from './Components/Subs';\nimport Teams from './Components/Teams';\nimport Games from './Components/Games';\nimport Timer from 'easytimer.js';\nimport { ToastContainer, cssTransition } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Slide = cssTransition({\n  enter: 'toast-in',\n  exit: 'toast-out',\n  duration: [500, 100]\n})\n\nfunction App() {\n\n  const DB_HOST = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5984' :\n    'https://db-couchdb.duckdns.org';\n\n  // set state\n  const [loadingDB, setLoadingDB] = useState(true);\n  const [userID, setUserID] = useState(localStorage.getItem('userID') || '');\n  const [remoteDB] = useState(new PouchDB(`${DB_HOST}/ultimate-stats`));\n  const [localDB] = useState(new PouchDB('ultimate-stats'));\n  const [teams, setTeams] = useState([]);\n  const [allGameHistory, setAllGameHistory] = useState([]);\n  const [gameLength, setGameLength] = useState(25); //1 for testing\n  const [darkTeam, setDarkTeam] = useState(''); //test str Dark Team\n  const [lightTeam, setLightTeam] = useState(''); // test str Light Team\n  const [showSetup, setShowSetup] = useState(true); //set false for testing\n  const [statTeam, setStatTeam] = useState(''); //test str testDark\n  const [playerStats, setPlayerStats] = useState([]); \n  // hardcode playerStats for testing {\"name\":\"Luke\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player2\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player3\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player4\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player5\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player6\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player7\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player8\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player9\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player10\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0}\n  const [offense, setOffense] = useState(true);\n  const [score, setScore] = useState({\n    'dark': 0,\n    'light': 0\n  });\n  const [gameHistory, setGameHistory] = useState([]);\n  const [gameTime, setGameTime] = useState('');\n  const [paused, setPaused] = useState(false);\n  const [testGame, setTestGame] = useState(false);\n  const [gameTimer] = useState(new Timer({\n    countdown: true,\n    callback: (timer) => {\n      setGameTime(timer.getTimeValues().toString(['minutes', 'seconds']))\n    }\n  }));\n\n  const getData = useCallback(() => {\n    if (!remoteDB) return;\n    setLoadingDB(true)\n    remoteDB.allDocs({ include_docs: true }).then(res => {\n      console.log('Documents fetched');\n      console.log(res);\n      setLoadingDB(false);\n      res.rows.forEach(row => {\n        if (row.doc._id === 'team-doc') setTeams(row.doc.teams);\n        if (row.doc._id === 'game-history') setAllGameHistory(row.doc.games);\n      })\n    })\n  }, [remoteDB])\n\n  // get data from the DB when ready\n  useEffect(() => {\n    if (!remoteDB) return;\n    remoteDB.info();\n    getData();\n  }, [remoteDB, getData])\n\n  // handle remote document update\n  const handleRemoteUpdate = (doc) => {\n    // TODO update the state on remote update.\n    console.log(doc)\n  }\n\n  // Effect for handling remote DB changes\n  useEffect(() => {\n    if (loadingDB || !localDB || !remoteDB) return;\n    let dbSync;\n    dbSync = localDB.sync(remoteDB, {\n      live: true,\n      retry: true,\n      include_docs: true,\n    }).on('change', (e) => {\n      console.log('Database Change');\n      console.log(e);\n      let changedDoc = e.change.docs[0];\n      if (e.direction === 'pull') {\n        handleRemoteUpdate(changedDoc);\n        console.log(`Updated: ${changedDoc._id}`);\n      } else {\n        console.log('This was a local change');\n      }\n    }).on('active', () => console.log('Sync Active'))\n      .on('error', () => console.log('Database Sync Error'));\n    return () => {\n      dbSync.cancel();\n      console.log('Sync Cancelled');\n    };\n  }, [loadingDB, localDB, remoteDB])\n\n  // set the game clock to initial value when gameLength changes\n  useEffect(() => {\n    setGameTime(`${gameLength.toString().padStart(2, 0)}:00`);\n  }, [gameLength])\n\n  // finish the game setup and set state for stat taking\n  const finishSetup = (time, dark, light, statTeam, offense) => {\n    setGameLength(parseInt(time));\n    setDarkTeam(dark);\n    setLightTeam(light);\n    setStatTeam(statTeam);\n    setOffense(offense);\n    setShowSetup(false);\n    let findTeam = teams.find(team => team.name === statTeam)\n    let initPlayerStats = [];\n    for (let player of findTeam.players) {\n      initPlayerStats.push({\n        name: player,\n        Touch: 0,\n        Assist: 0,\n        Point: 0,\n        'T-Away': 0,\n        Drop: 0,\n        'D-Play': 0,\n        GSO: 0,\n        'GSO-Mark': 0\n      })\n    }\n    setPlayerStats(initPlayerStats);\n  }\n\n  // const save new game history to the db\n  const saveAllGames = (newAllHistory) => {\n    localDB.get('game-history').then(doc => {\n      doc.games = newAllHistory;\n      return localDB.put(doc);\n    }).then(res => console.log(res))\n      .catch(err => {\n        if (err.name === 'not_found') {\n          localDB.put({\n            _id: 'game-history',\n            games: newAllHistory\n          })\n        } else {\n          console.log(err)\n        }\n      })\n  }\n\n  const resetGame = () => {\n    setGameLength(25);\n    gameTimer.stop();\n    setDarkTeam('');\n    setLightTeam('');\n    setStatTeam('');\n    setShowSetup(true);\n    setPlayerStats([]);\n    setGameHistory([]);\n    setGameTime('25:00');\n    setPaused(false);\n    setTestGame(false);\n    setScore({\n      'dark': 0,\n      'light': 0\n    })\n  }\n\n  const toggleOffense = () => {\n    setOffense(!offense);\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Home\n            userID={userID}\n            setUserID={setUserID}\n            localDB={localDB}\n          />\n        </Route>\n        <Route path='/stats'>\n          {userID ?\n            <Stats\n              userID={userID}\n              teams={teams}\n              showSetup={showSetup}\n              finishSetup={finishSetup}\n              gameLength={gameLength}\n              darkTeam={darkTeam}\n              lightTeam={lightTeam}\n              statTeam={statTeam}\n              offense={offense}\n              score={score}\n              setScore={setScore}\n              allGameHistory={allGameHistory}\n              setAllGameHistory={setAllGameHistory}\n              gameHistory={gameHistory}\n              setGameHistory={setGameHistory}\n              gameTime={gameTime}\n              startTimer={() => gameTimer.start({ startValues: { minutes: gameLength } })}\n              pauseTimer={() => gameTimer.pause()}\n              stopTimer={() => gameTimer.stop()}\n              resetTimer={() => {\n                gameTimer.reset()\n                setGameTime(`${gameLength.toString().padStart(2, 0)}:00`)\n              }}\n              paused={paused}\n              setPaused={setPaused}\n              playerStats={playerStats}\n              setPlayerStats={setPlayerStats}\n              toggleOffense={toggleOffense}\n              testGame={testGame}\n              setTestGame={setTestGame}\n              saveAllGames={saveAllGames}\n              resetGame={resetGame}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/subs'>\n          {userID ?\n            <Subs\n              userID={userID}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/teams'>\n          {userID ?\n            <Teams\n              teams={teams}\n              setTeams={setTeams}\n              localDB={localDB}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/games'>\n          <Games\n            allGameHistory={allGameHistory}\n            setAllGameHistory={setAllGameHistory}\n            saveAllGames={saveAllGames}\n          />\n        </Route>\n      </Switch>\n      <div className='bottom-nav'>\n        <NavLink className='nav-link' to='/' exact activeClassName='nav-active'>Home</NavLink>\n        <NavLink className='nav-link' to='/stats' activeClassName='nav-active'>Stats</NavLink>\n        <NavLink className='nav-link' to='/subs' activeClassName='nav-active'>Subs</NavLink>\n        <NavLink className='nav-link' to='/teams' activeClassName='nav-active'>Teams</NavLink>\n        <NavLink className='nav-link' to='/games' activeClassName='nav-active'>Games</NavLink>\n      </div>\n      <ToastContainer\n        position='bottom-center'\n        transition={Slide}\n        autoClose={false}\n        hideProgressBar\n        newestOnTop={false}\n        closeOnClick={false}\n        rtl={false}\n        pauseOnVisibilityChange={false}\n        draggable={false}\n        pauseOnHover={false}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}