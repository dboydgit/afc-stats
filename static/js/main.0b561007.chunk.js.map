{"version":3,"sources":["Components/Header.js","Components/Home.js","Components/GameSetup.js","Components/GameInfo.js","Components/OffenseButtons.js","Components/DefenceButtons.js","Components/StatPlayerList.js","Components/Stats.js","utils/timeUtils.js","Components/SubPlayerList.js","Components/Subs.js","Components/Team.js","Components/Teams.js","Components/StatTable.js","Components/SubStatTable.js","Components/Games.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Home","props","useState","localStorage","getItem","userVal","setUserVal","showChange","setShowChange","handleSubmit","e","preventDefault","setUserID","setItem","handleChange","target","value","userID","onSubmit","type","onChange","onClick","to","GameSetup","time","setTime","dark","setDark","light","setLight","statTeam","setStatTeam","offence","setOffence","error","setError","teamNames","key","teams","team","push","name","id","htmlFor","min","max","forStats","checked","setTestGame","offenceBool","timeStr","formTime","parseInt","isValidTime","finishSetup","GameInfo","darkTeam","score","gameTime","startTimer","setPaused","console","log","paused","pauseTimer","resetTimer","lightTeam","OffenseButtons","mustTouch","noThrowaway","noTouch","noDrop","prevEntry","action","turnover","player","handleStatClick","Touch","Assist","Point","Drop","DefenceButtons","GSO","StatPlayerList","list","playerStats","map","offense","Stats","window","onbeforeunload","showStatSetup","returnValue","showAddPlayer","setShowAddPlayer","newPlayer","setNewPlayer","setPrevEntry","gameHistory","length","toast","dismiss","currentTarget","newHistory","lastEntry","secLastEntry","lastPlayer","secLastPlayer","newScore","setScore","Date","historyEntry","date","toDateString","toTimeString","newPlayerStats","forEach","el","addHistEntry","setPlayerStats","success","toggleOffense","setGameHistory","showSubSetup","testGame","gameLength","confirm","autoClose","resetGame","saveGame","undoEntry","pop","info","newPrevEntry","placeholder","addStatPlayer","timeToMinSec","seconds","mins","Math","floor","secs","round","toString","padStart","timeToSecs","minSecs","times","split","DragHandle","SortableHandle","SortableList","SortableContainer","subStats","index","SortableItem","ind","disabled","SortableElement","lastTimeIn","timeOnSecs","timeOnPoint","timeOnField","subPlayerSelected","handleOut","handleIn","SubPlayerList","onSortEnd","oldIndex","newIndex","updatedStats","arrayMove","setSubStats","useDragHandle","Subs","completeSub","playerIn","playerOut","newSubStats","inInd","findIndex","outInd","shiftLength","shiftLengths","addSubHistory","entryIn","splice","entryOut","unshift","setSubInSelected","setSubOutSelected","setSubPlayerSelected","i","sub","timeMMSS","shifts","averageTimeOnSecs","averageTimeOnMMSS","finishGameSubs","subInSelected","subOutSelected","addSubPlayer","players","deletePlayer","playInd","setTeams","Player","newTeams","teamInd","playerInd","Team","showPlayers","setShowPlayers","toggleShowPlayers","gm","sort","updatedTeams","shouldCancelStart","innerText","toLowerCase","tagName","deleteTeam","saveTeam","TeamList","Teams","db","localDB","teamName","setTeamName","teamGM","setTeamGM","showAddTeam","setShowAddTeam","teamPlayers","handleInputChange","get","_id","then","doc","_rev","put","res","catch","err","deletedTeamArr","deleted","newTeam","toISOString","docType","StatTable","columns","useMemo","accessor","sortDescFirst","data","stats","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","statHeaders","label","DelToast","toggleDeleteGame","game","closeToast","GameCard","showStats","setShowStats","showNoteInput","setShowNoteInput","note","setNote","gameDate","generateFileName","str","getFullYear","getMonth","getDate","toggleShowStats","NoteList","notes","statTaker","subHistory","filename","hideProgressBar","updateGame","GameList","games","filter","CombinedCSV","CSVDate","setCSVDate","wkNum","setWkNum","combinedStats","setCombinedStats","dateOptions","Set","add","newCombinedStats","stat","GM","VS","Week","options","option","Games","showCombinedCSV","setShowCombinedCSV","allGameHistory","newGames","gameInd","setAllGameHistory","newAllHistory","Slide","cssTransition","enter","exit","duration","App","loadingDB","setLoadingDB","PouchDB","remoteDB","setGameLength","setDarkTeam","setLightTeam","setShowStatSetup","setShowSubSetup","setOffense","setGameTime","Timer","countdown","callback","timer","getTimeValues","gameTimer","gameStarted","setGameStarted","gameFinished","setGameFinished","setSubHistory","getData","useCallback","allDocs","include_docs","a","b","useEffect","dbSync","sync","live","retry","on","changedDoc","change","docs","direction","cancel","opponent","opponentTeam","find","findTeam","initSubsStats","initPlayerStats","stop","gameType","gameDetails","gameData","encodeURIComponent","JSON","stringify","fileNameStat","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","path","exact","start","startValues","minutes","addEventListener","pause","stopTimer","reset","newSubHistory","initSubHistory","timeOn","inEntry","outEntry","activeClassName","position","transition","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b561007.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Header.css';\n\nexport default function Header() {\n    return (\n        <header className='app-header'>\n            <h1>AFC Premier League Stats</h1>\n        </header>\n    )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Home.css';\nimport Header from './Header';\n\nexport default function Home(props) {\n\n    const [userVal, setUserVal] = useState(localStorage.getItem('userID') || '');\n    const [showChange, setShowChange] = useState(false);\n\n    // set the userID on form submit\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        props.setUserID(userVal);\n        localStorage.setItem('userID', userVal);\n        setShowChange(false);\n    }\n\n    // update state on form change\n    const handleChange = (e) => {\n        setUserVal(e.target.value);\n    }\n\n    return (\n        <div className='App'>\n            <Header />\n            <div className='home-content'>\n                {!props.userID &&\n                    <div className='home-form'>\n                        <p>Who is taking stats?</p>\n                        <form onSubmit={handleSubmit}>\n                            <input className='home-input' type='text' value={userVal} onChange={handleChange} />\n                            <button className='btn' type='submit'>Start</button>\n                        </form>\n                    </div>\n                }\n                {props.userID &&\n                    <>\n                        {!showChange &&\n                            <>\n                                <p>{`Welcome, ${props.userID}`}</p>\n                                <p className='change-username-link'\n                                    onClick={() => setShowChange(true)}\n                                >Change Name</p>\n                            </>}\n                        {showChange &&\n                            <form onSubmit={handleSubmit}>\n                                <input className='home-input' type='text' value={userVal} onChange={handleChange} />\n                                <button className='btn' type='submit'>Save</button>\n                            </form>\n                        }\n                        <div className=\"home-btn-group\">\n                            <Link\n                                className='btn'\n                                to='/stats'>Stats\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/subs'>Subs\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/teams'>Teams\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/games'>Past Games\n                            </Link>\n                        </div>\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport '../styles/GameSetup.css';\n\nexport default function GameSetup(props) {\n\n    const [time, setTime] = useState('25');\n    const [dark, setDark] = useState('');\n    const [light, setLight] = useState('');\n    const [statTeam, setStatTeam] = useState('');\n    const [offence, setOffence] = useState('');\n    const [error, setError] = useState('');\n\n    let teamNames = [<option value='' key=''></option>];\n    for (let team of props.teams) {\n        teamNames.push(<option value={team.name} key={team.name}>{team.name}</option>);\n    }\n\n    const isValidTime = (timeStr) => {\n        let formTime = parseInt(timeStr);\n        if (formTime >= 1 && formTime <= 120) return true;\n        else return false;\n    }\n\n    const submitFinish = () => {\n        if (!isValidTime(time)) {\n            setError('Time should be between 1 - 120 mins')\n            return;\n        }\n        if (!dark || !light || !statTeam || (props.forStats && !offence)) {\n            setError('Please choose all options');\n            return;\n        }\n        let offenceBool;\n        if (props.forStats) {\n            statTeam === offence ? offenceBool = true : offenceBool = false;\n        } else {\n            offenceBool = 'subs';\n        }\n        props.finishSetup(time, dark, light, statTeam, offenceBool);\n    }\n\n    const handleCheck = (e) => {\n        e.target.checked ? props.setTestGame(true) : props.setTestGame(false);\n    }\n\n    return (\n        <div className='game-setup card'>\n            <h3 id='setup-title'>Game Setup</h3>\n            <div className='stat-reminder'>\n                <div className='stat-reminder-title'>\n                    <span>Check Roster!</span>\n                </div>\n                <div>\n                    <span>Confirm roster on the Teams page before setting up your game.</span>\n                </div>\n            </div>\n            <label htmlFor='game-length'>Game Length (mins)</label>\n            <input name='game-length' type='number' min='1' max='120'\n                value={time} onChange={(e) => setTime(e.target.value)} />\n            <label htmlFor='dark-team'>Select Dark Team</label>\n            <select name='dark-team' value={dark}\n                onChange={(e) => setDark(e.target.value)}>{teamNames}</select>\n            <label htmlFor='light-team'>Select Light Team</label>\n            <select name='light-team' value={light}\n                onChange={(e) => setLight(e.target.value)}>{teamNames}</select>\n\n            <label htmlFor='stat-team'>{`Tracking ${props.forStats ? 'Stats' : 'Subs'} For`}</label>\n            <select name='stat-team' value={statTeam}\n                onChange={(e) => setStatTeam(e.target.value)}>\n                <option></option>\n                <option>{`${dark}`}</option>\n                <option>{`${light}`}</option>\n            </select>\n            {props.forStats &&\n                <>\n                    <label htmlFor='offence-team'>Team on Offence</label>\n                    <select name='offence-team' value={offence}\n                        onChange={(e) => setOffence(e.target.value)}>\n                        <option></option>\n                        <option>{`${dark}`}</option>\n                        <option>{`${light}`}</option>\n                    </select>\n                </>\n            }\n            <div id='test-game-checkbox' onChange={handleCheck}>\n                <input type='checkbox' />\n                <span>Check for test game</span>\n            </div>\n            <button className='btn' onClick={submitFinish}>Finish Setup</button>\n            {error &&\n                <span className='form-err'>{error}</span>}\n        </div>\n    )\n}\n","import React from 'react';\n\n\nexport default function GameInfo(props) {\n\n    return (\n        <div className='game-info'>\n            <div className='score-card dark'>\n                <span id='team-name'>{props.darkTeam}</span>\n                {props.score && <span className='score dark'>{props.score.dark}</span>}\n            </div>\n            <div className='game-clock'>\n                <span>{`${props.gameTime}`}</span>\n                <div className='timer-controls'>\n                    <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.startTimer();\n                            props.setPaused(false);\n                            console.log('start timer')\n                        }}>play_arrow</i>\n                    {!props.paused && <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.pauseTimer();\n                            props.setPaused(true);\n                            console.log('pause timer')\n                        }}>pause</i>}\n                    {props.score && props.paused && <i className='material-icons timer-control'\n                        onClick={() => {\n                            props.resetTimer();\n                            props.pauseTimer();\n                            props.setPaused(false);\n                            console.log('reset timer')\n                        }}>replay</i>}\n                </div>\n            </div>\n            <div className='score-card light'>\n                <span id='team-name'>{props.lightTeam}</span>\n                {props.score && <span className='score light'>{props.score.light}</span>}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function OffenseButtons(props) {\n    let mustTouch = false;\n    let noThrowaway = true;\n    let noTouch = false;\n    let noDrop = false;\n\n    if (!props.prevEntry.action || props.prevEntry.turnover) mustTouch = true;\n    if (!props.prevEntry.turnover && props.prevEntry.player === props.player.name) {\n        noTouch = true;\n        noThrowaway = false;\n        noDrop = true;\n    }\n\n    return (\n        <div className='stat-btns'>\n            <button\n                className={`btn stat-btn ${noTouch ? 'btn-inactive' : ''}`}\n                name='Touch'\n                onClick={(e) => props.handleStatClick(e, props.player.name, false)}>\n                Touch\n                    <div className='score-badge'>{props.player.Touch}</div>\n                {props.player.Assist !== 0 &&\n                    <div className='score-badge assist'>{`${props.player.Assist}-A`}</div>}\n            </button>\n            <button\n                className={`btn stat-btn ${mustTouch ? 'btn-inactive' : ''}`}\n                name='Point'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                Point\n                    <div className='score-badge'>{props.player.Point}</div>\n            </button>\n            {noDrop && <button\n                className={`btn stat-btn t-away-btn ${mustTouch || noThrowaway ? 'btn-inactive' : ''}`}\n                name='T-Away'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                T-Away\n                    <div className='score-badge'>{props.player['T-Away']}</div>\n            </button>}\n            {noThrowaway && <button\n                className={`btn stat-btn ${mustTouch || noDrop ? 'btn-inactive' : ''}`}\n                name='Drop'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                Drop\n                    <div className='score-badge'>{props.player.Drop}</div>\n            </button>}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function DefenceButtons(props) {\n    \n    return (\n        <div className='stat-btns'>\n            <button\n                className='btn stat-btn'\n                name='D-Play'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                D-Play\n                    <div className='score-badge'>{props.player['D-Play']}</div>\n            </button>\n            <button\n                className='btn stat-btn'\n                name='GSO'\n                onClick={(e) => props.handleStatClick(e, props.player.name)}>\n                GSO\n                    <div className='score-badge'>{props.player.GSO}</div>\n            </button>\n        </div>\n    )\n}\n","import React from 'react'\nimport OffenseButtons from './OffenseButtons';\nimport DefenceButtons from './DefenceButtons';\n\nexport default function StatPlayerList(props) {\n\n    const playerStats = props.playerStats;\n\n    const list = playerStats.map(player =>\n        <div key={player.name} className='player-input'>\n            <div\n                className={`player-name ${props.darkTeam === props.statTeam ? 'dark' : ''}`}\n            >\n                <span className='player-text'>{player.name}</span>\n            </div>\n            {props.offense &&\n                <OffenseButtons\n                    player={player}\n                    handleStatClick={props.handleStatClick}\n                    prevEntry={props.prevEntry}\n                />}\n            {!props.offense &&\n                <DefenceButtons\n                    player={player}\n                    handleStatClick={props.handleStatClick}\n                />}\n        </div>\n    )\n\n    return (\n        <div className='player-list'>{list}</div>\n    )\n}\n","import React, { useState } from 'react';\nimport GameSetup from './GameSetup';\nimport GameInfo from './GameInfo';\nimport StatPlayerList from './StatPlayerList';\nimport '../styles/Stats.css';\nimport { toast } from 'react-toastify';\n\nexport default function Stats(props) {\n\n    // show warning on page reload attempt during game\n    window.onbeforeunload = (e) => {\n        if (!props.showStatSetup) e.returnValue = 'Game will not be saved.';\n    }\n\n    const [showAddPlayer, setShowAddPlayer] = useState(false);\n    const [newPlayer, setNewPlayer] = useState('');\n    const [prevEntry, setPrevEntry] = useState({\n        action: '',\n        player: '',\n        turnover: false\n    });\n\n    const handleStatClick = (e, player = '', turnover = true) => {\n        // start timer automatically if not started already\n        if (!props.gameHistory.length || props.paused) props.startTimer();\n        toast.dismiss();\n        let action = e.currentTarget.name;\n        // set the game history\n        let newHistory = [...props.gameHistory];\n        // get the last entry and set player if available\n        let lastEntry = newHistory[newHistory.length - 1] || '';\n        let secLastEntry = newHistory[newHistory.length - 2] || '';\n        let lastPlayer = '';\n        let secLastPlayer = '';\n        // set last throwers for Point and Drop\n        if (lastEntry && (action === 'Point' || action === 'Drop')) {\n            lastPlayer = lastEntry.player || '';\n            if (!secLastEntry.turnover) secLastPlayer = secLastEntry.player || '';\n        }\n        // Validate first action of a possession is a touch\n        if (props.offense && action !== 'Touch' && (lastEntry.turnover || !newHistory.length)) {\n            toast.error('First action of a possession must be a touch');\n            return;\n        }\n        // Validate cannot drop own throw\n        if (action === 'Drop' && lastEntry.player === player) {\n            toast.error('Cannot drop own throw');\n            return;\n        }\n        // set last throwers for touch (if not right after turnover)\n        if (action === 'Touch' && !lastEntry.turnover) {\n            if (player === lastEntry.player) {\n                toast.error(\"Cannot touch the disc twice in a row\");\n                return;\n            } else {\n                lastPlayer = lastEntry.player || '';\n                if (!secLastEntry.turnover) secLastPlayer = secLastEntry.player || '';\n            }\n        }\n        // Validate throwaway was by lastPlayer\n        if (action === 'T-Away') {\n            if (lastEntry.action !== 'Touch') {\n                toast.error('Throwaway can only be recorded following a touch');\n                return;\n            } else if (lastEntry.player !== player) {\n                console.log(lastEntry.player)\n                toast.error(`Only player in possession (${lastEntry.player}) can throwaway`)\n                return;\n            }\n        }\n        // set the score for point, GSO\n        let newScore = { ...props.score };\n        if (action === 'Point') {\n            props.statTeam === props.darkTeam ? newScore.dark++ : newScore.light++;\n        }\n        if (action === 'GSO') {\n            props.statTeam === props.darkTeam ? newScore.light++ : newScore.dark++;\n        }\n        props.setScore(newScore);\n        // add action to game history\n        let time = new Date();\n        let historyEntry = {\n            date: time.toDateString(),\n            time: time.toTimeString(),\n            gameTime: props.gameTime,\n            statTeam: props.statTeam,\n            [`${props.darkTeam}_score`]: newScore.dark,\n            [`${props.lightTeam}_score`]: newScore.light,\n            action: action,\n            player: player,\n            lastPlayer: lastPlayer,\n            secLastPlayer: secLastPlayer,\n            turnover: turnover,\n        }\n        // set new player stats\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.forEach(el => {\n            if (el.name === player) {\n                //debugger\n                // Add touch for a drop\n                if (action === 'Drop') el.Touch++;\n                // Add touch for a point if not added already, also add to game history\n                if (action === 'Point') {\n                    if (lastPlayer !== player) {\n                        el.Touch++;\n                        let addHistEntry = {\n                            date: time.toDateString(),\n                            time: time.toTimeString(),\n                            gameTime: props.gameTime,\n                            statTeam: props.statTeam,\n                            [`${props.darkTeam}_score`]: newScore.dark,\n                            [`${props.lightTeam}_score`]: newScore.light,\n                            action: 'Touch',\n                            player: player,\n                            lastPlayer: lastPlayer,\n                            secLastPlayer: secLastPlayer,\n                            turnover: false,\n                        }\n                        newHistory.push(addHistEntry);\n                    } else if (secLastEntry.action !== 'D-Play') {\n                        historyEntry.lastPlayer = secLastPlayer;\n                        historyEntry.secLastPlayer = secLastEntry.lastPlayer;\n                    }\n                }\n                el[action]++;\n            }\n            // give assist to lastPlayer if not the same as current player or if Callahan goal\n            if (action === 'Point' && el.name === lastPlayer && (lastPlayer !== player ||\n                (secLastEntry.turnover || !secLastEntry))) el.Assist++;\n            // give assist to secLastPlayer if last touch was by same player\n            else if (action === 'Point' && el.name === secLastPlayer && lastPlayer === player) el.Assist++;\n        })\n        props.setPlayerStats(newPlayerStats);\n        // log entry to console\n        console.log(`${player}: ${action}: gameClock: ${props.gameTime}: \n            time: ${historyEntry.time}`)\n\n        toast.success(`Last Entry: ${action}${player ? ' - ' + player : ''} ${lastPlayer ? ' from ' + lastPlayer : ''}`)\n        setPrevEntry({ action: action, player: player, turnover: turnover });\n        if (turnover) props.toggleOffense();\n        newHistory.push(historyEntry);\n        props.setGameHistory(newHistory);\n    }\n\n    const handleUndo = () => {\n        toast.dismiss();\n        let newHistory = [...props.gameHistory];\n        let newScore = { ...props.score };\n        // remove last entry from game history\n        let undoEntry = newHistory.pop();\n        if (!undoEntry) {\n            toast.info('Nothing to undo');\n            return;\n        }\n        console.log('UNDO');\n        // undo playerStats count\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.forEach(el => {\n            if (el.name === undoEntry.player) {\n                if (undoEntry.action === 'Drop') el.Touch--;\n                if (undoEntry.action === 'Point' && !undoEntry.lastPlayer) el.Assist--;\n                el[undoEntry.action]--;\n            }\n            // remove assists and extra touch from game history for goals\n            if (undoEntry.action === 'Point') {\n                if (undoEntry.lastPlayer === el.name) {\n                    el.Assist--;\n                }\n            }\n        })\n        props.setPlayerStats(newPlayerStats);\n        // undo turnover and change buttons\n        if (undoEntry.turnover) props.toggleOffense();\n        // undo points and change score\n        if (undoEntry.action === 'Point') {\n            props.statTeam === props.darkTeam ? newScore.dark-- : newScore.light--;\n        }\n        if (undoEntry.action === 'GSO') {\n            props.statTeam === props.darkTeam ? newScore.light-- : newScore.dark--;\n        }\n        // show undo action\n        toast.info(`UNDO: ${undoEntry.action}${undoEntry.player ? ` by ${undoEntry.player}` : ''}`);\n        // set new state\n        props.setScore(newScore);\n        props.setGameHistory(newHistory);\n        if (!newHistory.length) setPrevEntry({ action: '', player: '', turnover: false });\n        else {\n            let newPrevEntry = newHistory[newHistory.length - 1];\n            setPrevEntry({\n                action: newPrevEntry.action,\n                player: newPrevEntry.player,\n                turnover: newPrevEntry.turnover\n            })\n        }\n    }\n\n    const addStatPlayer = (player) => {\n        let newPlayerStats = [...props.playerStats];\n        newPlayerStats.push({\n            name: player,\n            Touch: 0,\n            Assist: 0,\n            Point: 0,\n            'T-Away': 0,\n            Drop: 0,\n            'D-Play': 0,\n            GSO: 0,\n        })\n        props.setPlayerStats(newPlayerStats);\n        setShowAddPlayer(false);\n        setNewPlayer('');\n    }\n\n    return (\n        <div className='App'>\n            <div className='stats'>\n                {!props.showSubSetup &&\n                    <p>Currently tracking Subs.</p>}\n                {props.showSubSetup && props.showStatSetup &&\n                    <GameSetup\n                        teams={props.teams}\n                        finishSetup={props.finishSetup}\n                        setTestGame={props.setTestGame}\n                        forStats={true}\n                    />}\n                {props.showSubSetup && !props.showStatSetup &&\n                    <div className='game-stats'>\n                        {props.testGame &&\n                            <div id='test-notification'>\n                                <p id='test-text'>Test Game</p>\n                            </div>}\n                        <GameInfo\n                            darkTeam={props.darkTeam}\n                            lightTeam={props.lightTeam}\n                            score={props.score}\n                            gameTime={props.gameTime}\n                            gameLength={props.gameLength}\n                            startTimer={props.startTimer}\n                            pauseTimer={props.pauseTimer}\n                            resetTimer={props.resetTimer}\n                            paused={props.paused}\n                            setPaused={props.setPaused}\n                            forStats={true}\n                        />\n                        <div className='game-options'>\n                            <button className='btn opt-btn'\n                                onClick={() => {\n                                    if (window.confirm('Cancel Game? Progress will not be saved.')) {\n                                        toast.dismiss();\n                                        toast.error('Game Deleted', { autoClose: 2500 });\n                                        props.resetGame();\n                                        setPrevEntry({\n                                            action: '',\n                                            player: '',\n                                            turnover: false\n                                        });\n                                    }\n                                }}>Exit Game</button>\n                            <button className={`btn ${!props.paused ? 'btn-inactive' : ''} opt-btn`}\n                                onClick={() => {\n                                    if (!props.paused) {\n                                        toast.error('Cannot finish game when timer is running. Pause timer to finish game early.', { autoClose: 2500 })\n                                        return;\n                                    }\n                                    toast.dismiss();\n                                    toast.success('Game Saved', { autoClose: 3000 });\n                                    props.saveGame('stats');\n                                }\n                                }>Finish & Save</button>\n                            <button className='btn opt-btn'\n                                onClick={handleUndo}>\n                                Undo<i className='material-icons md-18'>undo</i>\n                            </button>\n                        </div>\n                        <StatPlayerList\n                            offense={props.offense}\n                            playerStats={props.playerStats}\n                            setPlayerStats={props.setPlayerStats}\n                            statTeam={props.statTeam}\n                            darkTeam={props.darkTeam}\n                            handleStatClick={handleStatClick}\n                            gameHistory={props.gameHistory}\n                            // use current entry to track and disable correct buttons...\n                            prevEntry={prevEntry}\n                        />\n                        {!props.offense &&\n                            <button\n                                className='btn stat-btn stat-btn-after'\n                                name='O-Error'\n                                onClick={(e) => handleStatClick(e)}>\n                                Offensive Error\n                        </button>\n                        }\n                        {!showAddPlayer && <button\n                            className='btn stat-btn stat-btn-after'\n                            onClick={() => setShowAddPlayer(true)}\n                        >Add Player</button>}\n                        {showAddPlayer &&\n                            <div className='add-player-input'>\n                                <i className='material-icons'\n                                    onClick={() => setShowAddPlayer(false)}>close</i>\n                                <input\n                                    placeholder='player name'\n                                    onChange={(e) => setNewPlayer(e.target.value)}\n                                    value={newPlayer}></input>\n                                <button\n                                    className='btn stat-btn stat-btn-after'\n                                    onClick={() => addStatPlayer(newPlayer)}>Save</button>\n                            </div>\n                        }\n                    </div>}\n            </div>\n        </div>\n    )\n}\n","export const timeToMinSec = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.round(seconds - (mins * 60));\n    return `${mins.toString()}:${secs.toString().padStart(2, 0)}`\n}\n\nexport const timeToSecs = (minSecs) => {\n    if (!minSecs) return 0;\n    let times = minSecs.split(':');\n    return (parseInt(times[0])*60) + parseInt(times[1]);\n}\n\nexport const timeOnPoint = (lastTimeIn, gameTime) => {\n    let timeOnSecs = timeToSecs(lastTimeIn) - timeToSecs(gameTime);\n    return timeToMinSec(timeOnSecs);\n}","import React from 'react'\nimport '../styles/Subs.css';\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport { timeToMinSec, timeOnPoint } from '../utils/timeUtils';\nimport arrayMove from 'array-move';\n\nconst DragHandle = SortableHandle(() => (\n    <i className={`material-icons handle`}>drag_handle</i>)\n)\n\nconst SortableList = SortableContainer(({ props }) => {\n    return (\n        <div className='player-list sub-list'>\n            {props.subStats.map((player, index) =>\n                <SortableItem\n                    player={player}\n                    ind={index}\n                    index={index}\n                    key={index}\n                    props={props}\n                    disabled={index < 4 ? true : false}\n                />\n            )}\n        </div>\n    )\n})\n\nconst SortableItem = SortableElement(({ player, ind, props }) => {\n    return (\n        <div className='player-input sub-player'>\n            <div\n                className={`player-name sub-name ${props.darkTeam === props.statTeam ? 'dark' : ''}`}\n            >\n                <span className='player-text'>{player.name}</span>\n                {ind < 4 ?\n                    <span>{`Point: ${player.lastTimeIn ? timeOnPoint(player.lastTimeIn, props.gameTime) : '0:00'}`}</span> :\n                    <span>{`Total: ${timeToMinSec(player.timeOnField)}`}</span>}\n            </div>\n            {ind < 4 &&\n                <button\n                    className={`btn sub-btn ${props.subPlayerSelected === player.name ? 'btn-sec' : ''}`}\n                    onClick={() => props.handleOut(player)}\n\n                >Sub Out</button>}\n            {ind >= 4 &&\n                <>\n                    <DragHandle />\n                    <button\n                        className={`btn sub-btn ${props.subPlayerSelected === player.name ? 'btn-sec' : ''}`}\n                        onClick={() => props.handleIn(player)}>Sub In</button>\n                </>\n            }\n        </div>\n    )\n})\n\nexport default function SubPlayerList(props) {\n\n    const onSortEnd = ({ oldIndex, newIndex }) => {\n        if (newIndex < 4) return;\n        let updatedStats = arrayMove(props.subStats, oldIndex, newIndex)\n        props.setSubStats(updatedStats);\n    }\n\n    return (\n        <SortableList\n            props={props}\n            onSortEnd={onSortEnd}\n            useDragHandle\n        />\n    )\n}\n","import React, { useState } from 'react';\nimport GameSetup from './GameSetup';\nimport GameInfo from './GameInfo';\nimport SubPlayerList from './SubPlayerList';\nimport { toast } from 'react-toastify';\nimport { timeToSecs, timeToMinSec } from '../utils/timeUtils';\n\nexport default function Subs(props) {\n\n    const [showAddPlayer, setShowAddPlayer] = useState(false);\n    const [newPlayer, setNewPlayer] = useState('');\n\n    // show warning on page reload attempt during game\n    window.onbeforeunload = (e) => {\n        if (!props.showSubSetup) e.returnValue = 'Game will not be saved.';\n    }\n\n    const completeSub = (playerIn, playerOut) => {\n        let newSubStats = [...props.subStats];\n        let inInd = newSubStats.findIndex(el => el.name === playerIn);\n        let outInd = newSubStats.findIndex(el => el.name === playerOut);\n        // update player out subStats\n        let lastInSecs = timeToSecs(newSubStats[outInd].lastTimeIn);\n        let gameTimeSecs = timeToSecs(props.gameTime);\n        let shiftLength = lastInSecs - gameTimeSecs;\n        newSubStats[outInd].timeOnField += shiftLength;\n        newSubStats[outInd].shiftLengths.push(shiftLength);\n        // add entrys to subHistory\n        props.addSubHistory(newSubStats[inInd].name, newSubStats[outInd].name, newSubStats[outInd].timeOnField);\n        // set the last time in for player in\n        newSubStats[inInd].lastTimeIn = props.gameTime;\n        // switch players in the subStats arr\n        // [newSubStats[inInd], newSubStats[outInd]] = [newSubStats[outInd], newSubStats[inInd]];\n        // Player on to ind0 and player out to ind[length-1]\n        let entryIn = newSubStats.splice(newSubStats.findIndex(el => el.name === playerIn), 1);\n        let entryOut = newSubStats.splice(newSubStats.findIndex(el => el.name === playerOut), 1);\n        newSubStats.unshift(entryIn[0]);\n        newSubStats.push(entryOut[0]);\n        //\n        props.setSubStats(newSubStats);\n        props.setSubInSelected(false);\n        props.setSubOutSelected(false);\n        props.setSubPlayerSelected('');\n        toast.dismiss();\n        toast.success(`Subbed in ${playerIn} for ${playerOut}`)\n    }\n\n    const finishGameSubs = () => {\n        let newSubStats = [...props.subStats];\n        // update timeOnField for 4 players on field at game end\n        for (let i = 0; i < 4; i++) {\n            let lastInSecs = timeToSecs(newSubStats[i].lastTimeIn);\n            let gameTimeSecs = timeToSecs(props.gameTime);\n            let shiftLength = lastInSecs - gameTimeSecs;\n            newSubStats[i].timeOnField += shiftLength;\n            newSubStats[i].shiftLengths.push(shiftLength);\n        }\n        for (let sub of newSubStats) {\n            sub.timeMMSS = timeToMinSec(sub.timeOnField);\n            sub.shifts = sub.shiftLengths.length;\n            sub.averageTimeOnSecs = sub.timeOnField / sub.shifts || 0;\n            sub.averageTimeOnMMSS = timeToMinSec(sub.averageTimeOnSecs);\n        }\n        props.setSubStats(newSubStats);\n    }\n\n    const handleOut = (player) => {\n        if (props.subOutSelected) {\n            props.setSubPlayerSelected(player.name);\n            return;\n        }\n        if (props.subInSelected) {\n            completeSub(props.subPlayerSelected, player.name);\n            return;\n        }\n        props.setSubPlayerSelected(player.name);\n        props.setSubOutSelected(true);\n    }\n\n    const handleIn = (player) => {\n        if (props.subInSelected) {\n            props.setSubPlayerSelected(player.name)\n            return;\n        }\n        if (props.subOutSelected) {\n            completeSub(player.name, props.subPlayerSelected);\n            return;\n        }\n        props.setSubPlayerSelected(player.name);\n        props.setSubInSelected(true);\n    }\n\n    const resetSubs = () => {\n        if (!props.paused) {\n            toast.error('Cannot reset game when timer is running. Pause timer to reset game.', { autoClose: 2500 })\n            return;\n        }\n        if (window.confirm('Reset Game? Progress will not be saved.')) {\n            toast.dismiss();\n            toast.info('Game Reset', { autoClose: 2500 });\n            props.finishSetup(props.gameLength, props.darkTeam, props.lightTeam, props.statTeam, 'subs');\n            props.resetTimer();\n            props.pauseTimer();\n            props.setPaused(true);\n        }\n    }\n\n    const addSubPlayer = (player) => {\n        let newSubStats = [...props.subStats];\n        newSubStats.push({\n            name: player,\n            timeOnField: 0,\n            lastTimeIn: `${props.gameTime}:00`,\n            shiftLengths: [],\n        })\n        props.setSubStats(newSubStats);\n        setShowAddPlayer(false);\n        setNewPlayer('');\n    }\n\n    return (\n        <div className='App'>\n            {!props.showStatSetup &&\n                <p>Currently tracking Stats.</p>}\n            {props.showStatSetup && props.showSubSetup &&\n                <GameSetup\n                    teams={props.teams}\n                    finishSetup={props.finishSetup}\n                    setTestGame={props.setTestGame}\n                    forStats={false}\n                />}\n            {props.showStatSetup && !props.showSubSetup &&\n                <div className='game-stats'>\n                    <GameInfo\n                        darkTeam={props.darkTeam}\n                        lightTeam={props.lightTeam}\n                        gameTime={props.gameTime}\n                        gameLength={props.gameLength}\n                        startTimer={props.startTimer}\n                        pauseTimer={props.pauseTimer}\n                        resetTimer={props.resetTimer}\n                        paused={props.paused}\n                        setPaused={props.setPaused}\n                        forStats={false}\n                    />\n                    <div className='game-options'>\n                        <button className='btn opt-btn'\n                            onClick={() => {\n                                if (window.confirm('Cancel Game? Progress will not be saved.')) {\n                                    toast.dismiss();\n                                    toast.error('Game Deleted', { autoClose: 2500 });\n                                    props.resetGame();\n                                }\n                            }}>Exit Game</button>\n                        <button className={`btn ${!props.paused ? 'btn-inactive' : ''} opt-btn`}\n                            onClick={resetSubs}>Reset Game</button>\n                        <button className={`btn ${!props.paused ? 'btn-inactive' : ''} opt-btn`}\n                            onClick={() => {\n                                if (!props.paused) {\n                                    toast.error('Cannot finish game when timer is running. Pause timer to finish game early.', { autoClose: 2500 })\n                                    return;\n                                }\n                                finishGameSubs();\n                                toast.dismiss();\n                                toast.success('Game Saved', { autoClose: 3000 });\n                                props.saveGame('subs');\n                            }}>Finish & Save</button>\n                    </div>\n                    <SubPlayerList\n                        subStats={props.subStats}\n                        setSubStats={props.setSubStats}\n                        darkTeam={props.darkTeam}\n                        lightTeam={props.lightTeam}\n                        statTeam={props.statTeam}\n                        handleIn={handleIn}\n                        handleOut={handleOut}\n                        subPlayerSelected={props.subPlayerSelected}\n                        gameLength={props.gameLength}\n                        gameTime={props.gameTime}\n                    />\n                    {!showAddPlayer && <button\n                        className='btn stat-btn stat-btn-after'\n                        onClick={() => setShowAddPlayer(true)}\n                    >Add Player</button>}\n                    {showAddPlayer &&\n                        <div className='add-player-input'>\n                            <i className='material-icons'\n                                onClick={() => setShowAddPlayer(false)}>close</i>\n                            <input\n                                placeholder='player name'\n                                onChange={(e) => setNewPlayer(e.target.value)}\n                                value={newPlayer}></input>\n                            <button\n                                className='btn stat-btn stat-btn-after'\n                                onClick={() => addSubPlayer(newPlayer)}>Save</button>\n                        </div>\n                    }\n                </div>}\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\n\nconst DragHandle = SortableHandle(() => (\n    <i className={`material-icons handle`}>drag_handle</i>)\n)\n\nconst SortableList = SortableContainer(({ players, deletePlayer, props }) => {\n    return (\n        <div className='player-list'>\n            {players.map((player, index) => (\n                <SortableItem\n                    key={`Item-${index}`}\n                    index={index}\n                    player={player}\n                    playInd={index}\n                    deletePlayer={deletePlayer}\n                    props={props}\n                />\n            ))}\n        </div>\n    )\n})\n\nconst SortableItem = SortableElement(({ player, playInd, deletePlayer, props }) => (\n    <Player\n        player={player}\n        ind={playInd}\n        teams={props.teams}\n        setTeams={props.setTeams}\n        team={props.team}\n        deletePlayer={deletePlayer}\n    />\n));\n\nconst Player = (props) => {\n\n    const player = props.player;\n\n    const handlePlayerChange = (e) => {\n        let newTeams = [...props.teams];\n        let teamInd = newTeams.findIndex(el => el.name === props.team.name);\n        let playerInd = parseInt(e.target.name);\n        newTeams[teamInd]['players'][playerInd] = e.target.value;\n        props.setTeams(newTeams);\n    }\n\n    return (\n        <div className='player-list-item'>\n            <DragHandle />\n            <i className='material-icons player-del'\n                onClick={() => {\n                    if (window.confirm(`Delete Player (${player})?`)) {\n                        props.deletePlayer(player);\n                    }\n                }}>delete</i>\n            <input\n                className='player-card'\n                name={props.ind}\n                value={player}\n                onChange={handlePlayerChange}\n            />\n        </div>\n    )\n}\n\nexport default function Team(props) {\n\n    const [showPlayers, setShowPlayers] = useState(false);\n\n    const toggleShowPlayers = () => {\n        setShowPlayers(!showPlayers);\n    }\n\n    const saveTeam = (team) => {\n        props.saveTeam(team);\n        toggleShowPlayers();\n    }\n\n    const addPlayer = () => {\n        // add player to teams state\n        let newTeams = [...props.teams];\n        for (let team of newTeams) {\n            if (team.name === props.team.name) {\n                team.players.push('New Player');\n                break;\n            }\n        }\n        props.setTeams(newTeams);\n    }\n\n    const deletePlayer = (player) => {\n        // delete player from state\n        let newTeams = [...props.teams];\n        for (let team of newTeams) {\n            if (team.name === props.team.name) {\n                let ind = team.players.findIndex(el => el === player);\n                team.players.splice(ind, 1);\n                break;\n            }\n        }\n        props.setTeams(newTeams);\n    }\n\n    const onSortEnd = ({ oldIndex, newIndex }) => {\n        let updatedTeams = [...props.teams];\n        for (let team of updatedTeams) {\n            if (team.name === props.team.name) {\n                team.players = arrayMove(team.players, oldIndex, newIndex)\n            }\n        }\n        props.setTeams(updatedTeams);\n    }\n\n    function shouldCancelStart(e) {\n        // Cancel sorting if the event target is an anchor tag (`a`)\n        if (e.target.innerText.toLowerCase() === 'delete' ||\n            e.target.tagName.toLowerCase() === 'input') {\n            return true; // Return true to cancel sorting\n        }\n    }\n\n    const sortPlayersAZ = () => {\n        let newTeams = [...props.teams];\n        for (let team of newTeams) {\n            if (team.name === props.team.name) {\n                team.players.sort();\n                break;\n            }\n        }\n        props.setTeams(newTeams);\n    }\n\n    return (\n        <div className='card team-card'>\n            <div className='team-name'>\n                <span>{`${props.team.name}`}</span>\n            </div>\n            <div className='card-info'>\n                <span className='gm-name'>{`GM: ${props.team.gm}`}</span>\n                <div className='card-link'>\n                    {showPlayers &&\n                        <button className='btn player-sort-btn' onClick={sortPlayersAZ}>\n                            <span>Sort A-Z</span>\n                            <i className=\"material-icons md-18\">sort</i>\n                        </button>}\n                    <div onClick={toggleShowPlayers}>\n                        {!showPlayers &&\n                            <div className='card-link'>\n                                <span>Show Players</span>\n                                <i className=\"material-icons md-18\">arrow_drop_down</i>\n                            </div>}\n                        {showPlayers &&\n                            <div className='card-link'>\n                                <span>Hide Players</span>\n                                <i className=\"material-icons md-18\">arrow_drop_up</i>\n                            </div>}\n                    </div>\n                </div>\n            </div>\n            {showPlayers &&\n                <div className='card-players'>\n                    <SortableList\n                        props={props}\n                        players={props.team.players}\n                        team={props.team}\n                        teams={props.teams}\n                        setTeams={props.setTeams}\n                        deletePlayer={deletePlayer}\n                        onSortEnd={onSortEnd}\n                        shouldCancelStart={shouldCancelStart}\n                        useDragHandle\n                    />\n                    <button\n                        className='btn team-btn btn-del'\n                        name={props.ind}\n                        onClick={props.deleteTeam}>Delete Team\n                    </button>\n                    <button\n                        className='btn team-btn'\n                        onClick={addPlayer}\n                    >Add Player</button>\n                    <button\n                        className='btn team-btn'\n                        onClick={() => saveTeam(props.team)}>Save Changes\n                    </button>\n                </div>\n            }\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport Team from './Team';\nimport '../styles/Teams.css'\n\nconst TeamList = (props) => {\n    const teams = props.teams.map((team, ind) =>\n    <Team\n        team={team}\n        ind={ind}\n        key={team.name}\n        teams={props.teams}\n        setTeams={props.setTeams}\n        saveTeam={props.saveTeam}\n        deleteTeam={props.deleteTeam}\n    />);\n    return (\n        <div className='team-list'>{teams}</div>\n    )\n}\n\nexport default function Teams(props) {\n\n    const db = props.localDB;\n\n    const [teamName, setTeamName] = useState('');\n    const [teamGM, setTeamGM] = useState('');\n    const [showAddTeam, setShowAddTeam] = useState(false);\n\n    const teamPlayers = [\n        'Player1',\n        'Player2',\n        'Player3',\n        'Player4',\n        'Player5',\n        'Player6',\n        'Player7',\n        'Player8',\n        'Player9',\n        'Player10'\n    ];\n\n    const handleInputChange = (e) => {\n        switch (e.target.name) {\n            case 'team-name':\n                setTeamName(e.target.value);\n                break;\n            case 'team-gm':\n                setTeamGM(e.target.value);\n                break;\n            default:\n                console.log('State not updated!');\n        }\n    }\n\n    const createTeam = (e) => {\n        e.preventDefault();\n        let newTeams = [...props.teams];\n        let newTeam = {\n            _id: new Date().toISOString(),\n            docType: 'team',\n            name: teamName,\n            gm: teamGM,\n            players: teamPlayers\n        };\n        newTeams.push(newTeam);\n        // update state with new teams\n        props.setTeams(newTeams);\n        // add teams to DB\n        saveTeam(newTeam);\n        // clear form\n        setTeamName('');\n        setTeamGM('');\n        setShowAddTeam(false);\n    }\n\n    const saveTeam = (team) => {\n        db.get(team._id).then(doc => {\n            team._rev = doc._rev;\n            return db.put(team);\n        }).then(res => console.log(res))\n        .catch(err => {\n            if (err.name === 'not_found') {\n                db.put(team)\n                console.log('New Team Created')\n            } else {\n                console.log(err);\n            }\n        })\n    }\n\n    const deleteTeam = (e) => {\n        let teamInd = parseInt(e.target.name);\n        let newTeams = [...props.teams];\n        let deletedTeamArr = newTeams.splice(teamInd, 1);\n        props.setTeams(newTeams);\n        db.get(deletedTeamArr[0]._id).then(doc => {\n            doc.deleted = true;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(e => console.log(e))\n    }\n\n    return (\n        <div className='App'>\n            <h1 className='page-header'>Teams</h1>\n            <TeamList\n                teams={props.teams}\n                setTeams={props.setTeams}\n                saveTeam={saveTeam}\n                deleteTeam={deleteTeam}\n            />\n            {!showAddTeam && \n            <button className='btn' onClick={() => {setShowAddTeam(true)}}>Add Team</button>}\n            {showAddTeam && \n            <div className='add-team-form'>\n                <label htmlFor='team-name'>Team Name: </label>\n                <input name='team-name' onChange={handleInputChange} value={teamName}/>\n                <label htmlFor='team-gm'>Team GM: </label>\n                <input name='team-gm' onChange={handleInputChange} value={teamGM}/>\n                <button className='btn' onClick={createTeam}>Create Team</button>\n                <button className='btn nmt' onClick={() => setShowAddTeam(false)}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function StatTable(props) {\n\n    const columns = useMemo(() => [\n        { Header: 'Name', accessor: 'name' },\n        { Header: 'Point', accessor: 'Point', sortDescFirst: true},\n        { Header: 'Assist', accessor: 'Assist', sortDescFirst: true },\n        { Header: 'Touch', accessor: 'Touch', sortDescFirst: true },\n        { Header: 'DPlay', accessor: 'D-Play', sortDescFirst: true },\n        { Header: 'TAway', accessor: 'T-Away', sortDescFirst: true },\n        { Header: 'Drop', accessor: 'Drop', sortDescFirst: true },\n        { Header: 'GSO', accessor: 'GSO', sortDescFirst: true },\n    ], [])\n\n    const data = useMemo(() => props.stats, [props.stats])\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n        {\n            data,\n            columns,\n        },\n        useSortBy\n    )\n\n    return (\n        <>\n        <p className='stat-table stat-table-title'>Game Stats - Touch headers to sort</p>\n        <table className='stat-table' {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                    // Add the sorting props to control sorting. For this example\n                    // we can add them into the header props\n                    <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                        {column.isSorted\n                        ? column.isSortedDesc\n                            ? <i className=\"material-icons md-18\">arrow_drop_down</i>\n                            : <i className=\"material-icons md-18\">arrow_drop_up</i>\n                        : ''}\n                    </span>\n                    </th>\n                ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map(\n                (row, i) => {\n                prepareRow(row);\n                return (\n                    <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                        return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        )\n                    })}\n                    </tr>\n                )}\n            )}\n            </tbody>\n        </table>\n        </>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function StatTable(props) {\n\n    const columns = useMemo(() => [\n        { Header: 'Name', accessor: 'name' },\n        { Header: 'Last In', accessor: 'lastTimeIn', sortDescFirst: true},\n        { Header: 'Time On Field', accessor: 'timeMMSS', sortDescFirst: true },\n        { Header: 'Total Shifts', accessor: 'shifts', sortDescFirst: true },\n        { Header: 'Average Time On', accessor: 'averageTimeOnMMSS', sortDescFirst: true },\n    ], [])\n\n    const data = useMemo(() => props.stats, [props.stats])\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n        {\n            data,\n            columns,\n        },\n        useSortBy\n    )\n\n    return (\n        <>\n        <p className='stat-table stat-table-title'>Game Stats - Touch headers to sort</p>\n        <table className='stat-table' {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                    // Add the sorting props to control sorting. For this example\n                    // we can add them into the header props\n                    <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                        {column.isSorted\n                        ? column.isSortedDesc\n                            ? <i className=\"material-icons md-18\">arrow_drop_down</i>\n                            : <i className=\"material-icons md-18\">arrow_drop_up</i>\n                        : ''}\n                    </span>\n                    </th>\n                ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map(\n                (row, i) => {\n                prepareRow(row);\n                return (\n                    <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                        return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        )\n                    })}\n                    </tr>\n                )}\n            )}\n            </tbody>\n        </table>\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport { CSVLink } from 'react-csv';\nimport '../styles/GameList.css';\nimport StatTable from './StatTable';\nimport SubStatTable from './SubStatTable';\nimport { toast } from 'react-toastify';\n\nconst statHeaders = [\n    { label: 'Name', key: 'name' },\n    { label: 'Touches', key: 'Touch' },\n    { label: 'Points', key: 'Point' },\n    { label: 'Assists', key: 'Assist' },\n    { label: 'D-Plays', key: 'D-Play' },\n    { label: 'Drops', key: 'Drop' },\n    { label: 'Throwaways', key: 'T-Away' },\n    { label: 'GSO', key: 'GSO' },\n];\n\nconst combinedFileName = (str, date) => {\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}-${str}.csv`\n}\n\n\nconst DelToast = (props) => (\n    <>\n        <span>Game Deleted...</span>\n        <button\n            className='btn toast-btn'\n            onClick={() => {\n                props.toggleDeleteGame(props.game._id);\n                props.closeToast();\n            }}\n        >\n            Undo<i className='material-icons md-18'>undo</i>\n        </button>\n    </>\n)\n\nconst GameCard = (props) => {\n\n    const [showStats, setShowStats] = useState(false);\n    const [showNoteInput, setShowNoteInput] = useState(false);\n    const [note, setNote] = useState('');\n\n    let game = props.game;\n    let gameDate = new Date(game.date);\n\n    const generateFileName = (str) => {\n        return `${gameDate.getFullYear()}-${gameDate.getMonth() + 1}-${gameDate.getDate()}-${game.darkTeam}-vs-${game.lightTeam}-${str}-${game.statTeam}.csv`\n    }\n\n    const toggleShowStats = () => setShowStats(!showStats);\n\n    const NoteList = (props) => {\n        const notes = props.notes.map((note, index) =>\n            <p className='card-note' key={index}>{note}</p>\n        );\n        notes.unshift(<p className='card-note-title' key='note-title'>Notes</p>)\n        return <div className='card-notes'>{notes}</div>\n    }\n\n    return (\n        <div className='card game-list-card'>\n            <div className='game-list-info'>\n                <span>{new Date(game.date).toDateString()}</span>\n                <span>{`Stat Taker: ${game.statTaker}`}</span>\n            </div>\n            <div className='game-list-info'>\n                <span>{`${game.playerStats ? 'Stats' : 'Subs'} For: ${game.statTeam}`}</span>\n                {game.testGame && <span className='test-game'>Test Game</span>}\n            </div>\n            <div className='game-score'>\n                <div className='score-card score-card-games dark'>\n                    <span id='team-name'>{game.darkTeam}</span>\n                    {game.score && <span className='score dark'>{game.score.dark}</span>}\n                </div>\n                <div className='score-card score-card-games light'>\n                    <span id='team-name'>{game.lightTeam}</span>\n                    {game.score && <span className='score light'>{game.score.light}</span>}\n                </div>\n            </div>\n            <div className='game-list-btns'>\n                <CSVLink\n                    className='btn game-list-btn'\n                    data={game.gameHistory || game.subHistory}\n                    filename={game.gameHistory ? generateFileName('GAME') : generateFileName('SUBS')}\n                    target='_blank'\n                >\n                    {game.gameHistory ? `Game CSV` : 'Subs CSV'}\n                    <i className=\"material-icons md-18\">get_app</i>\n                </CSVLink>\n                {game.playerStats && <CSVLink\n                    className='btn game-list-btn'\n                    data={game.playerStats}\n                    headers={statHeaders}\n                    filename={generateFileName('STATS')}\n                    target='_blank'\n                >\n                    Stats CSV\n                    <i className=\"material-icons md-18\">get_app</i></CSVLink>}\n                {game.subStats && <CSVLink\n                    className='btn game-list-btn'\n                    data={game.subStats}\n                    filename={generateFileName('SubStats')}\n                    target='_blank'\n                >\n                    Stats CSV\n                    <i className=\"material-icons md-18\">get_app</i></CSVLink>}\n                {!showStats && <button\n                    className='btn game-list-btn'\n                    onClick={toggleShowStats}\n                >\n                    Show Stats<i className=\"material-icons md-18\">arrow_drop_down</i>\n                </button>}\n                {showStats && <button\n                    className='btn game-list-btn'\n                    onClick={toggleShowStats}\n                >\n                    Hide Stats<i className=\"material-icons md-18\">arrow_drop_up</i>\n                </button>}\n            </div>\n            {showStats && game.playerStats &&\n                <>\n                    <StatTable stats={game.playerStats} />\n                    {game.notes && <NoteList notes={game.notes} />}\n                    <div className='game-card-btns'>\n                        <button\n                            className='btn btn-del game-list-btn'\n                            onClick={() => {\n                                props.toggleDeleteGame(game.date);\n                                toast.error(\n                                    <DelToast\n                                        game={game}\n                                        toggleDeleteGame={props.toggleDeleteGame}\n                                    />, { autoClose: 4000, hideProgressBar: false });\n                            }}>Delete Game</button>\n                        {!showNoteInput && <button\n                            className='btn game-list-btn'\n                            onClick={() => {\n                                setShowNoteInput(true);\n                            }}>Add Note</button>}\n                    </div>\n                    {showNoteInput &&\n                        <div>\n                            <textarea\n                                className='note-input'\n                                value={note}\n                                onChange={(e) => setNote(e.target.value)}\n                            />\n                            <div className='game-card-btns'>\n                                <button className='btn game-list-btn' onClick={() => setShowNoteInput(false)}>Cancel</button>\n                                <button\n                                    className='btn game-list-btn'\n                                    onClick={() => {\n                                        if (!props.game.notes) props.game.notes = [];\n                                        props.game.notes.push(note);\n                                        props.updateGame(game);\n                                        setShowNoteInput(false);\n                                        setNote('');\n                                    }}\n                                >Save</button>\n                            </div>\n                        </div>}\n                </>\n            }\n            {showStats && game.subStats &&\n                <>\n                    <SubStatTable stats={game.subStats} />\n                    {game.notes && <NoteList notes={game.notes} />}\n                    <div className='game-card-btns'>\n                        <button\n                            className='btn btn-del game-list-btn'\n                            onClick={() => {\n                                props.toggleDeleteGame(game._id);\n                                toast.error(\n                                    <DelToast\n                                        game={game}\n                                        toggleDeleteGame={props.toggleDeleteGame}\n                                    />, { autoClose: 4000, hideProgressBar: false });\n                            }}>Delete Game</button>\n                        {!showNoteInput && <button\n                            className='btn game-list-btn'\n                            onClick={() => {\n                                setShowNoteInput(true);\n                            }}>Add Note</button>}\n                    </div>\n                    {showNoteInput &&\n                        <div>\n                            <textarea\n                                className='note-input'\n                                value={note}\n                                onChange={(e) => setNote(e.target.value)}\n                            />\n                            <div className='game-card-btns'>\n                                <button className='btn game-list-btn' onClick={() => setShowNoteInput(false)}>Cancel</button>\n                                <button\n                                    className='btn game-list-btn'\n                                    onClick={() => {\n                                        if (!props.game.notes) props.game.notes = [];\n                                        props.game.notes.push(note);\n                                        props.updateGame(game);\n                                        setShowNoteInput(false);\n                                        setNote('');\n                                    }}\n                                >Save</button>\n                            </div>\n                        </div>}\n                </>\n            }\n        </div>\n    )\n}\n\nconst GameList = (props) => {\n    const showGames = props.games.filter(game => !game.deleted);\n    const games = showGames.map((game) =>\n        <GameCard\n            key={game.date}\n            game={game}\n            updateGame={props.updateGame}\n            toggleDeleteGame={props.toggleDeleteGame}\n        />\n    )\n    return <div className='team-list'>{games}</div>\n}\n\nconst CombinedCSV = (props) => {\n\n    const [CSVDate, setCSVDate] = useState('');\n    const [wkNum, setWkNum] = useState('');\n    const [combinedStats, setCombinedStats] = useState([]);\n\n    const combinedHeaders = [\n        { label: 'Name', key: 'name' },\n        { label: 'GM', key: 'GM' },\n        { label: 'Vs', key: 'VS' },\n        { label: 'Week', key: 'Week' },\n        { label: 'Touches', key: 'Touch' },\n        { label: 'Points', key: 'Point' },\n        { label: 'Assists', key: 'Assist' },\n        { label: 'D-Plays', key: 'D-Play' },\n        { label: 'Drops', key: 'Drop' },\n        { label: 'Throwaways', key: 'T-Away' },\n        { label: 'GSO', key: 'GSO' },\n    ];\n\n    let dateOptions = new Set();\n\n    dateOptions.add('');\n\n    for (let game of props.games) {\n        if (!game.playerStats) continue;\n        let gameDate = new Date(game.date);\n        dateOptions.add(gameDate.toDateString());\n    }\n\n    const DateOptions = (props) => {\n        let options = [];\n        for (let option of props.options) {\n            options.push(<option key={option} value={option}>{option}</option>)\n        }\n        return options;\n    }\n\n    const handleSelect = (e) => {\n        setCSVDate(e.target.value);\n        let newCombinedStats = [];\n        for (let game of props.games) {\n            let gameDate = new Date(game.date).toDateString();\n            if (gameDate === e.target.value && game.playerStats) {\n                for (let stat of game.playerStats) {\n                    if (!stat.GM) stat.GM = '';\n                    if (!stat.VS) stat.VS = '';\n                    stat.Week = wkNum;\n                    newCombinedStats.push(stat);\n                }\n            }\n        }\n        setCombinedStats(newCombinedStats);\n    }\n\n    const handleWkNumChange = (e) => {\n        setWkNum(e.target.value);\n        let newCombinedStats = [...combinedStats];\n        for (let stat of newCombinedStats) {\n            stat.Week = e.target.value;\n        }\n        setCombinedStats(newCombinedStats);\n    }\n\n    return (\n        <div className='combined-csv-options'>\n            <div className='select-title'>Select Date</div>\n            <select value={CSVDate} onChange={handleSelect}>\n                <DateOptions options={dateOptions} />\n            </select>\n            {CSVDate &&\n                <>\n                    <div className='select-title'>Enter Week Number</div>\n                    <input value={wkNum} onChange={handleWkNumChange} />\n                    <CSVLink\n                        className='btn game-list-btn'\n                        data={combinedStats}\n                        headers={combinedHeaders}\n                        filename={combinedFileName('Combined-playerStats', new Date(CSVDate))}\n                    >\n                        Combined Stats\n                        <i className=\"material-icons md-18\">get_app</i>\n                    </CSVLink>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default function Games(props) {\n\n    const [showCombinedCSV, setShowCombinedCSV] = useState(false);\n\n    let db = props.localDB;\n\n    const toggleDeleteGame = (id) => {\n        // update local state\n        let newAllHistory = [...props.allGameHistory];\n        for (let game of newAllHistory) {\n            if (game._id === id) game.deleted = !game.deleted;\n            continue;\n        }\n        props.setAllGameHistory(newAllHistory);\n        // save to the DB\n        db.get(id).then(doc => {\n            doc.deleted = !doc.deleted;\n            return db.put(doc);\n        }).then(res => console.log(res))\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    const updateGame = (game) => {\n        console.log('Updating game ' + game)\n        let newGames = [...props.allGameHistory];\n        let gameInd = newGames.findIndex(el => el._id === game._id);\n        newGames[gameInd] = game;\n        props.setAllGameHistory(newGames);\n        db.get(game._id).then(doc => {\n            doc.notes = game.notes;\n            return db.put(doc);\n        }).then(res => console.log(res)).catch(err => {\n            console.log(err);\n        })\n    }\n\n    const toggleCombinedCSV = () => {\n        setShowCombinedCSV(!showCombinedCSV);\n    }\n\n    return (\n        <div className='App'>\n            <h1 className='page-header'>\n                <div>Recorded Games</div>\n                <button className='btn game-list-btn combined-csv-btn'\n                    onClick={toggleCombinedCSV}>\n                    Combined CSV\n                    {!showCombinedCSV && <i className=\"material-icons md-18\">arrow_drop_down</i>}\n                    {showCombinedCSV && <i className=\"material-icons md-18\">arrow_drop_up</i>}\n                </button>\n            </h1>\n            {showCombinedCSV &&\n                <CombinedCSV games={props.allGameHistory} teams={props.teams} />\n            }\n            <GameList\n                games={props.allGameHistory}\n                updateGame={updateGame}\n                toggleDeleteGame={toggleDeleteGame}\n            />\n        </div>\n    )\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  NavLink\n} from \"react-router-dom\";\nimport './styles/App.css';\nimport PouchDB from 'pouchdb';\nimport Home from './Components/Home';\nimport Stats from './Components/Stats';\nimport Subs from './Components/Subs';\nimport Teams from './Components/Teams';\nimport Games from './Components/Games';\nimport Timer from 'easytimer.js';\nimport { ToastContainer, cssTransition } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Slide = cssTransition({\n  enter: 'toast-in',\n  exit: 'toast-out',\n  duration: [500, 100]\n})\n\nfunction App() {\n\n  const DB_HOST = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5984' :\n    'https://db-couchdb.duckdns.org';\n\n  // set state\n  const [loadingDB, setLoadingDB] = useState(true);\n  const [userID, setUserID] = useState(localStorage.getItem('userID') || '');\n  const [remoteDB] = useState(new PouchDB(`${DB_HOST}/ultimate-stats`));\n  const [localDB] = useState(new PouchDB('ultimate-stats'));\n  const [teams, setTeams] = useState([]);\n  const [allGameHistory, setAllGameHistory] = useState([]);\n  const [gameLength, setGameLength] = useState(25); //1 for testing\n  const [darkTeam, setDarkTeam] = useState(''); //test str Dark\n  const [lightTeam, setLightTeam] = useState(''); // test str Light Team\n  const [showStatSetup, setShowStatSetup] = useState(true); //set false for testing\n  const [showSubSetup, setShowSubSetup] = useState(true); ////set false for testing\n  const [statTeam, setStatTeam] = useState(''); //test str Dark or Light\n  const [playerStats, setPlayerStats] = useState([]);\n  // hardcode playerStats for testing {\"name\":\"Luke\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player2\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player3\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player4\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player5\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player6\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player7\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player8\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player9\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0},{\"name\":\"Player10\",\"Touch\":0,\"Assist\":0,\"Point\":0,\"T-Away\":0,\"Drop\":0,\"D-Play\":0,\"GSO\":0,\"GSO-Mark\":0}\n  const [offense, setOffense] = useState(true);\n  const [score, setScore] = useState({\n    'dark': 0,\n    'light': 0\n  });\n  const [gameHistory, setGameHistory] = useState([]);\n  const [gameTime, setGameTime] = useState('');\n  const [paused, setPaused] = useState(false);\n  const [testGame, setTestGame] = useState(false);\n  const [gameTimer] = useState(new Timer({\n    countdown: true,\n    callback: (timer) => {\n      setGameTime(timer.getTimeValues().toString(['minutes', 'seconds']));\n    }\n  }));\n  // state for sub page\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [subStats, setSubStats] = useState([]);\n  // hardcode subStats for testing {\"name\":\"Luke\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player2\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player3\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player4\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player5\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player6\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player7\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player8\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player9\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false},{\"name\":\"Player10\",\"timeOnField\":0,\"lastTimeIn\":null,\"chosen\":false,\"selected\":false}\n  const [subInSelected, setSubInSelected] = useState(false);\n  const [subOutSelected, setSubOutSelected] = useState(false);\n  const [subPlayerSelected, setSubPlayerSelected] = useState('');\n  const [subHistory, setSubHistory] = useState([]);\n\n  const getData = useCallback(() => {\n    if (!remoteDB) return;\n    setLoadingDB(true)\n    remoteDB.allDocs({ include_docs: true }).then(res => {\n      console.log('Documents fetched');\n      console.log(res);\n      setLoadingDB(false);\n      let newAllHistory = [];\n      let newTeams = [];\n      res.rows.forEach(row => {\n        if (row.doc.docType === 'team' && !row.doc.deleted) {\n          newTeams.push(row.doc);\n        };\n        if ((row.doc.docType === 'stats' || row.doc.docType === 'subs') && !row.doc.deleted) {\n          newAllHistory.unshift(row.doc);\n        }\n      })\n      newAllHistory.sort((a, b) => {\n        let diff = new Date(b.date) - new Date(a.date);\n        return diff;\n      })\n      setAllGameHistory(newAllHistory);\n      setTeams(newTeams);\n    })\n  }, [remoteDB])\n\n  // get data from the DB when ready\n  useEffect(() => {\n    if (!remoteDB) return;\n    remoteDB.info();\n    getData();\n  }, [remoteDB, getData])\n\n  // Effect for handling remote DB changes\n  useEffect(() => {\n    if (loadingDB || !localDB || !remoteDB) return;\n    let dbSync;\n    dbSync = localDB.sync(remoteDB, {\n      live: true,\n      retry: true,\n      include_docs: true,\n    }).on('change', (e) => {\n      console.log('Database Change');\n      console.log(e);\n      let changedDoc = e.change.docs[0];\n      if (e.direction === 'pull') {\n        if (changedDoc.docType === 'stats' || changedDoc.docType === 'subs') {\n          let newAllHistory = [...allGameHistory];\n          let gameInd = newAllHistory.findIndex(game => game._id === changedDoc._id);\n          if (gameInd === -1) newAllHistory.unshift(changedDoc);\n          else newAllHistory[gameInd] = changedDoc;\n          setAllGameHistory(newAllHistory);\n        }\n        if (changedDoc.docType === 'team') {\n          let newTeams = [...teams];\n          let teamInd = newTeams.findIndex(team => team._id === changedDoc._id);\n          if (teamInd === -1) newTeams.push(changedDoc);\n          else newTeams[teamInd] = changedDoc;\n          setTeams(newTeams);\n        }\n        console.log(`Remote update: ${changedDoc._id} - ${changedDoc.docType}`);\n      } else {\n        console.log('This was a local change');\n      }\n    }).on('active', () => console.log('Sync Active'))\n      .on('error', () => console.log('Database Sync Error'));\n    return () => {\n      dbSync.cancel();\n      console.log('Sync Cancelled');\n    };\n  }, [loadingDB, localDB, remoteDB, allGameHistory, teams])\n\n  // set the game clock to initial value when gameLength changes\n  useEffect(() => {\n    setGameTime(`${gameLength.toString().padStart(2, 0)}:00`);\n  }, [gameLength])\n\n  // finish the game setup and set state for stat taking\n  const finishSetup = (time, dark, light, statTeam, offense) => {\n    setGameLength(parseInt(time));\n    setDarkTeam(dark);\n    setLightTeam(light);\n    setStatTeam(statTeam);\n    let opponent = statTeam === dark ? light : dark;\n    let opponentTeam = teams.find(team => team.name === opponent);\n    offense === 'subs' ? setShowSubSetup(false) : setShowStatSetup(false);\n    let findTeam = teams.find(team => team.name === statTeam)\n    if (offense === 'subs') {\n      let initSubsStats = [];\n      for (let player of findTeam.players) {\n        initSubsStats.push({\n          name: player,\n          timeOnField: 0,\n          lastTimeIn: `${time}:00`,\n          shiftLengths: [],\n        })\n      }\n      setSubStats(initSubsStats);\n    } else {\n      setOffense(offense);\n      let initPlayerStats = [];\n      for (let player of findTeam.players) {\n        initPlayerStats.push({\n          name: player,\n          GM: findTeam.gm || '',\n          VS: opponentTeam.gm || '',\n          Touch: 0,\n          Assist: 0,\n          Point: 0,\n          'T-Away': 0,\n          Drop: 0,\n          'D-Play': 0,\n          GSO: 0,\n          'GSO-Mark': 0\n        })\n      }\n      setPlayerStats(initPlayerStats);\n    }\n  }\n\n  const resetGame = () => {\n    setGameLength(25);\n    gameTimer.stop();\n    setDarkTeam('');\n    setLightTeam('');\n    setStatTeam('');\n    setShowStatSetup(true);\n    setShowSubSetup(true);\n    setPlayerStats([]);\n    setSubStats([]);\n    setGameHistory([]);\n    setSubHistory([]);\n    setGameStarted(false);\n    setGameFinished(false);\n    setSubPlayerSelected('');\n    setSubInSelected(false);\n    setSubOutSelected(false);\n    setGameTime('25:00');\n    setPaused(false);\n    setTestGame(false);\n    setScore({\n      'dark': 0,\n      'light': 0\n    })\n  }\n\n  const saveGame = (gameType) => {\n    let gameDate = new Date();\n    let gameDetails = {\n      _id: gameDate.toISOString(),\n      date: gameDate,\n      docType: gameType,\n      darkTeam: darkTeam,\n      lightTeam: lightTeam,\n      statTeam: statTeam,\n      gameLength: gameLength,\n      testGame: testGame,\n      statTaker: userID,\n    }\n    if (gameType === 'stats') {\n      gameDetails.playerStats = playerStats;\n      gameDetails.score = score;\n      gameDetails.gameHistory = gameHistory;\n      // download backup data\n      let gameData = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify([[...gameHistory], [...playerStats]]));\n      let fileNameStat = `GameStats-${gameDate.getFullYear()}-${gameDate.getMonth() + 1}-${gameDate.getDate()}.json`;\n      let element = document.createElement('a');\n      element.setAttribute('href', gameData);\n      element.setAttribute('download', fileNameStat);\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    }\n    if (gameType === 'subs') {\n      gameDetails.subStats = subStats;\n      gameDetails.subHistory = subHistory;\n      // download backup data\n      let gameData = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify([[...subHistory], [...subStats]]));\n      let fileNameStat = `SubStats-${gameDate.getFullYear()}-${gameDate.getMonth() + 1}-${gameDate.getDate()}.json`;\n      let element = document.createElement('a');\n      element.setAttribute('href', gameData);\n      element.setAttribute('download', fileNameStat);\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    }\n    let newAllHistory = [...allGameHistory];\n    newAllHistory.unshift(gameDetails);\n    setAllGameHistory(newAllHistory);\n    // add to the Database\n    localDB.put(gameDetails);\n    resetGame();\n  }\n\n  const toggleOffense = () => {\n    setOffense(!offense);\n  }\n\n  const initSubHistory = () => {\n    // add the first 4 players to the subHistory\n    let newSubHistory = [];\n    let time = new Date();\n    for (let i = 0; i < 4; i++) {\n      newSubHistory.push({\n        date: time.toDateString(),\n        time: time.toTimeString(),\n        gameTime: gameTime,\n        darkTeam: darkTeam,\n        lightTeam: lightTeam,\n        statTeam: statTeam,\n        player: subStats[i].name,\n        action: 'In',\n        timeOnField: ''\n      })\n    }\n    setSubHistory(newSubHistory);\n  }\n\n  const addSubHistory = (playerIn, playerOut, timeOn) => {\n    // add an entry to the subHistory\n    let newSubHistory = [...subHistory];\n    let time = new Date();\n    let inEntry = {\n      date: time.toDateString(),\n      time: time.toTimeString(),\n      gameTime: gameTime,\n      darkTeam: darkTeam,\n      lightTeam: lightTeam,\n      statTeam: statTeam,\n      player: playerIn,\n      action: 'In',\n      timeOnField: ''\n    };\n    let outEntry = {\n      date: time.toDateString(),\n      time: time.toTimeString(),\n      gameTime: gameTime,\n      darkTeam: darkTeam,\n      lightTeam: lightTeam,\n      statTeam: statTeam,\n      player: playerOut,\n      action: 'Out',\n      timeOnField: timeOn\n    }\n    newSubHistory.push(outEntry, inEntry);\n    setSubHistory(newSubHistory);\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Home\n            userID={userID}\n            setUserID={setUserID}\n            localDB={localDB}\n          />\n        </Route>\n        <Route path='/stats'>\n          {userID ?\n            <Stats\n              userID={userID}\n              teams={teams}\n              showStatSetup={showStatSetup}\n              showSubSetup={showSubSetup}\n              finishSetup={finishSetup}\n              gameLength={gameLength}\n              darkTeam={darkTeam}\n              lightTeam={lightTeam}\n              statTeam={statTeam}\n              offense={offense}\n              score={score}\n              setScore={setScore}\n              gameHistory={gameHistory}\n              setGameHistory={setGameHistory}\n              gameTime={gameTime}\n              startTimer={() => {\n                if (gameFinished) return;\n                gameTimer.start({ startValues: { minutes: gameLength } })\n                setPaused(false);\n                if (!gameStarted && !gameFinished) {\n                  setGameStarted(true);\n                  gameTimer.addEventListener('targetAchieved', (e) => {\n                    console.log('Time Finished');\n                    setPaused(true);\n                    setGameFinished(true);\n                  })\n                }\n              }}\n              pauseTimer={() => gameTimer.pause()}\n              stopTimer={() => gameTimer.stop()}\n              resetTimer={() => {\n                gameTimer.reset()\n                setGameTime(`${gameLength.toString().padStart(2, 0)}:00`)\n              }}\n              paused={paused}\n              setPaused={setPaused}\n              playerStats={playerStats}\n              setPlayerStats={setPlayerStats}\n              toggleOffense={toggleOffense}\n              testGame={testGame}\n              setTestGame={setTestGame}\n              saveGame={saveGame}\n              resetGame={resetGame}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/subs'>\n          {userID ?\n            <Subs\n              userID={userID}\n              teams={teams}\n              darkTeam={darkTeam}\n              lightTeam={lightTeam}\n              statTeam={statTeam}\n              finishSetup={finishSetup}\n              setTestGame={setTestGame}\n              showSubSetup={showSubSetup}\n              showStatSetup={showStatSetup}\n              gameLength={gameLength}\n              gameTime={gameTime}\n              startTimer={() => {\n                if (gameFinished) return;\n                gameTimer.start({ startValues: { minutes: gameLength } });\n                setPaused(false);\n                if (!gameStarted && !gameFinished) {\n                  setGameStarted(true);\n                  gameTimer.addEventListener('targetAchieved', (e) => {\n                    console.log('Time Finished');\n                    setPaused(true);\n                    setGameFinished(true);\n                  })\n                  initSubHistory();\n                }\n              }}\n              pauseTimer={() => gameTimer.pause()}\n              stopTimer={() => gameTimer.stop()}\n              resetTimer={() => {\n                gameTimer.reset()\n                setGameTime(`${gameLength.toString().padStart(2, 0)}:00`)\n              }}\n              paused={paused}\n              setPaused={setPaused}\n              subStats={subStats}\n              setSubStats={setSubStats}\n              subInSelected={subInSelected}\n              setSubInSelected={setSubInSelected}\n              subOutSelected={subOutSelected}\n              setSubOutSelected={setSubOutSelected}\n              subPlayerSelected={subPlayerSelected}\n              setSubPlayerSelected={setSubPlayerSelected}\n              addSubHistory={addSubHistory}\n              resetGame={resetGame}\n              saveGame={saveGame}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/teams'>\n          {userID ?\n            <Teams\n              teams={teams}\n              setTeams={setTeams}\n              localDB={localDB}\n            /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/games'>\n          <Games\n            allGameHistory={allGameHistory}\n            setAllGameHistory={setAllGameHistory}\n            localDB={localDB}\n            teams={teams}\n          />\n        </Route>\n      </Switch>\n      <div className='bottom-nav'>\n        <NavLink className='nav-link' to='/' exact activeClassName='nav-active'>Home</NavLink>\n        <NavLink className='nav-link' to='/stats' activeClassName='nav-active'>Stats</NavLink>\n        <NavLink className='nav-link' to='/subs' activeClassName='nav-active'>Subs</NavLink>\n        <NavLink className='nav-link' to='/teams' activeClassName='nav-active'>Teams</NavLink>\n        <NavLink className='nav-link' to='/games' activeClassName='nav-active'>Games</NavLink>\n      </div>\n      <ToastContainer\n        position='bottom-center'\n        transition={Slide}\n        autoClose={false}\n        hideProgressBar\n        newestOnTop={false}\n        closeOnClick={false}\n        rtl={false}\n        pauseOnVisibilityChange={false}\n        draggable={false}\n        pauseOnHover={false}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}