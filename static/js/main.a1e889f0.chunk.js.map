{"version":3,"sources":["Components/Header.js","Components/Home.js","Components/Stats.js","Components/Team.js","Components/Teams.js","Components/Games.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Home","props","useState","userVal","setUserVal","userID","onSubmit","e","preventDefault","setUserID","localStorage","setItem","id","type","value","onChange","target","to","Stats","Player","player","setPlayer","name","ind","newTeams","teams","teamInd","findIndex","el","team","playerInd","parseInt","setTeams","PlayerList","listItems","players","map","key","Team","showPlayers","setShowPlayers","gm","onClick","deleteTeam","saveTeams","TeamList","Teams","db","localDB","teamName","setTeamName","teamGM","setTeamGM","teamPlayers","showAddTeam","setShowAddTeam","handleInputChange","console","log","get","then","doc","put","res","catch","splice","htmlFor","push","err","_id","Games","App","loadingDB","setLoadingDB","getItem","PouchDB","remoteDB","getData","useCallback","allDocs","include_docs","rows","forEach","row","useEffect","info","dbSync","sync","live","retry","on","changedDoc","change","docs","direction","cancel","path","exact","activeClassName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1e889f0.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Header.css';\n\nexport default function Header() {\n    return (\n        <header className='app-header'>\n            <h1>AFC Premier League Stats</h1>\n        </header>\n    )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Home.css';\nimport Header from './Header';\n\nexport default function Home(props) {\n\n    const [userVal, setUserVal] = useState('');\n\n    // set the userID on form submit\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        props.setUserID(userVal);\n        localStorage.setItem('userID', userVal);\n    }\n\n    // update state on form change\n    const handleChange = (e) => {\n        setUserVal(e.target.value);\n    }\n\n    return (\n        <div className='App'>\n            <Header />\n            <div className='home-content'>\n                {!props.userID &&\n                    <div className='home-form'>\n                        <p>Who is taking stats?</p>\n                        <form onSubmit={handleSubmit}>\n                            <input id='home-input' type='text' value={userVal} onChange={handleChange} />\n                            <button className='btn' type='submit'>Start</button>\n                        </form>\n                    </div>\n                }\n                {props.userID &&\n                    <div>\n                        <p>{`Welcome, ${props.userID}`}</p>\n                        <div className=\"home-btn-group\">\n                            <Link\n                                className='btn'\n                                to='/stats'>New Game\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/teams'>Teams\n                            </Link>\n                            <Link\n                                className='btn'\n                                to='/games'>Past Games\n                            </Link>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Stats() {\n    return (\n        <div className='App'>\n            <h1>STATS!</h1>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\n\nconst Player = (props) => {\n\n    const [player, setPlayer] = useState(props.player);\n\n    const handlePlayerChange = (e) => {\n        setPlayer(e.target.value);\n        let newTeams = [...props.teams];\n        let teamInd = newTeams.findIndex(el => el.name === props.team.name);\n        let playerInd = parseInt(e.target.name);\n        newTeams[teamInd]['players'][playerInd] = e.target.value;\n        props.setTeams(newTeams);\n    }\n\n    return <input\n        className='player-card'\n        name={props.ind}\n        value={player}\n        onChange={handlePlayerChange} />\n}\n\nconst PlayerList = (props) => {\n\n    let players = props.team.players;\n    const listItems = players.map((player, ind) =>\n        <Player\n            player={player}\n            ind={ind}\n            key={ind}\n            teams={props.teams}\n            setTeams={props.setTeams}\n            team={props.team}\n        />\n    );\n    return <div className='player-list'>{listItems}</div>\n}\n\nexport default function Team(props) {\n\n    const [showPlayers, setShowPlayers] = useState(false);\n\n    const toggleShowPlayers = () => {\n        setShowPlayers(!showPlayers);\n    }\n\n    return (\n        <div className='team-card'>\n            <div className='team-name'>\n                <span>{`${props.team.name}`}</span>\n            </div>\n            <div className='card-info'>\n                <span className='gm-name'>{`GM: ${props.team.gm}`}</span>\n                <span className='card-link' onClick={toggleShowPlayers}>\n                    <span>Players</span>\n                    {!showPlayers && <i className=\"material-icons md-18\">arrow_drop_down</i>}\n                    {showPlayers && <i className=\"material-icons md-18\">arrow_drop_up</i>}\n                </span>\n            </div>\n            {showPlayers &&\n                <div className='card-players'>\n                    <PlayerList\n                        team={props.team}\n                        teams={props.teams}\n                        setTeams={props.setTeams}\n                    />\n                    <button className='btn btn-del' name={props.ind} onClick={props.deleteTeam}>Delete Team</button>\n                    <button className='btn' onClick={() => props.saveTeams()}>Save Changes</button>\n                </div>\n                }\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport Team from './Team';\nimport '../styles/Teams.css'\n\nconst TeamList = (props) => {\n    const teams = props.teams.map((team, ind) =>\n    <Team\n        team={team}\n        ind={ind}\n        key={team.name}\n        teams={props.teams}\n        setTeams={props.setTeams}\n        saveTeams={props.saveTeams}\n        deleteTeam={props.deleteTeam}\n    />);\n    return (\n        <div className='team-list'>{teams}</div>\n    )\n}\n\nexport default function Teams(props) {\n\n    const db = props.localDB;\n\n    const [teamName, setTeamName] = useState('');\n    const [teamGM, setTeamGM] = useState('');\n    const [teamPlayers] = useState([\n        'Player1',\n        'Player2',\n        'Player3',\n        'Player4',\n        'Player5',\n        'Player6',\n        'Player7',\n        'Player8',\n        'Player9',\n        'Player10'\n    ]);\n    const [showAddTeam, setShowAddTeam] = useState(false);\n\n    const handleInputChange = (e) => {\n        switch (e.target.name) {\n            case 'team-name':\n                setTeamName(e.target.value);\n                break;\n            case 'team-gm':\n                setTeamGM(e.target.value);\n                break;\n            default:\n                console.log('State not updated!');\n        }\n    }\n\n    const updateTeams = (teams) => {\n        db.get('team-doc').then(doc => {\n            doc.teams = teams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(err => {\n            if (err.name === 'not_found') {\n                db.put({\n                    _id: 'team-doc',\n                    teams: teams\n                })\n                console.log('New Team doc created')\n            } else {\n                console.log(err);\n            }\n        })\n    }\n\n    const createTeam = (e) => {\n        e.preventDefault();\n        let newTeams = [...props.teams];\n        newTeams.push({\n            name: teamName,\n            gm: teamGM,\n            players: teamPlayers\n        });\n        // update state with new teams\n        props.setTeams(newTeams);\n        // add teams to DB\n        updateTeams(newTeams);\n        // clear form\n        setTeamName('');\n        setTeamGM('');\n        setShowAddTeam(false);\n    }\n\n    const saveTeams = (teams = props.teams) => {\n        console.log('Saving Teams')\n        db.get('team-doc').then(doc => {\n            doc.teams = teams;\n            return db.put(doc);\n        }).then(res => console.log(res))\n        .catch(e => console.log(e))\n    }\n\n    const deleteTeam = (e) => {\n        let teamInd = parseInt(e.target.name);\n        let newTeams = [...props.teams];\n        newTeams.splice(teamInd, 1);\n        props.setTeams(newTeams);\n        saveTeams(newTeams);\n    }\n\n    return (\n        <div className='App'>\n            <TeamList\n                teams={props.teams}\n                setTeams={props.setTeams}\n                saveTeams={saveTeams}\n                deleteTeam={deleteTeam}\n            />\n            {!showAddTeam && \n            <button className='btn' onClick={() => {setShowAddTeam(true)}}>Add Team</button>}\n            {showAddTeam && \n            <div className='add-team-form'>\n                <label htmlFor='team-name'>Team Name: </label>\n                <input name='team-name' onChange={handleInputChange} value={teamName}/>\n                <label htmlFor='team-gm'>Team GM: </label>\n                <input name='team-gm' onChange={handleInputChange} value={teamGM}/>\n                <button className='btn' onClick={createTeam}>Create Team</button>\n                <button className='btn nmt' onClick={() => setShowAddTeam(false)}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Games() {\n    return (\n        <div className='App'>\n            <h1>GAMES!</h1>\n        </div>\n    )\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  NavLink\n} from \"react-router-dom\";\nimport './styles/App.css';\nimport PouchDB from 'pouchdb';\nimport Home from './Components/Home';\nimport Stats from './Components/Stats';\nimport Teams from './Components/Teams';\nimport Games from './Components/Games';\n\nfunction App() {\n\n  const DB_HOST = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5984' :\n    'https://db-todo.duckdns.org/db';\n\n  // set state\n  const [loadingDB, setLoadingDB] = useState(true);\n  const [userID, setUserID] = useState(localStorage.getItem('userID') || '');\n  const [remoteDB] = useState(new PouchDB(`${DB_HOST}/ultimate-stats`));\n  const [localDB] = useState(new PouchDB('ultimate-stats'));\n  const [teams, setTeams] = useState([]);\n\n  const getData = useCallback(() => {\n    if (!remoteDB) return;\n    setLoadingDB(true)\n    remoteDB.allDocs({ include_docs: true }).then(res => {\n      console.log('Documents fetched');\n      console.log(res);\n      setLoadingDB(false);\n      res.rows.forEach(row => {\n        if (row.doc._id === 'team-doc') setTeams(row.doc.teams);\n      })\n    })\n  }, [remoteDB])\n\n  // handle remote document update\n  const handleRemoteUpdate = (doc) => {\n    // TODO update the state on remote update.\n    console.log(doc)\n  }\n\n  // get data from the DB when ready\n  useEffect(() => {\n    if (!remoteDB) return;\n    remoteDB.info();\n    getData();\n  }, [remoteDB, getData])\n\n  // Effect for handling remote DB changes\n  useEffect(() => {\n    if (loadingDB || !localDB || !remoteDB) return;\n    let dbSync;\n    dbSync = localDB.sync(remoteDB, {\n      live: true,\n      retry: true,\n      include_docs: true,\n    }).on('change', (e) => {\n      console.log('Database Change');\n      console.log(e);\n      let changedDoc = e.change.docs[0];\n      if (e.direction === 'pull') {\n        handleRemoteUpdate(changedDoc);\n        console.log(`Updated: ${changedDoc._id}`);\n      } else {\n        console.log('This was a local change');\n      }\n    }).on('active', () => console.log('Sync Active'))\n      .on('error', () => console.log('Database Sync Error'));\n    return () => {\n      dbSync.cancel();\n      console.log('Sync Cancelled');\n    };\n  }, [loadingDB, localDB, remoteDB])\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Home\n            userID={userID}\n            setUserID={setUserID}\n            localDB={localDB}\n          />\n        </Route>\n        <Route path='/stats'>\n          {userID ?\n          <Stats\n            userID={userID}\n            localDB={localDB}\n          /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/teams'>\n          {userID ?\n          <Teams \n            teams={teams}\n            setTeams={setTeams}\n            localDB={localDB}\n          /> : <Redirect to='/' />}\n        </Route>\n        <Route path='/games'>\n          <Games />\n        </Route>\n      </Switch>\n      <div className='bottom-nav'>\n        <NavLink className='nav-link' to='/' exact activeClassName='nav-active'>Home</NavLink>\n        <NavLink className='nav-link' to='/stats' activeClassName='nav-active'>Stats</NavLink>\n        <NavLink className='nav-link' to='/teams' activeClassName='nav-active'>Teams</NavLink>\n        <NavLink className='nav-link' to='/games' activeClassName='nav-active'>Games</NavLink>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}